{"version":3,"sources":["webpack://done-count/webpack/bootstrap","webpack://done-count/./src/index.js","webpack://done-count/external {\"root\":\"comTools\",\"commonjs\":\"com-tools\",\"commonjs2\":\"com-tools\",\"amd\":\"com-tools\"}"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DoneCount","totalOrOptions","total","otherProps","this","assign","undefined","oriTotal","newValue","_doneNum","resetDoneNum","doneNum","num","done","forcedDone","realDone","NamedDoneCount","namesOrNum","names","doneAgainNames","nameRecord","clear","Array","isArray","forEach","nm","nameCount","set","has","nameNum","Math","min","maxRepetNum","autoIncrTotalIfRepeat","maxNameNum","_oriTotal","_nameRecord","Map","_maxRepetNum","Infinity","_nameNum","count","_doneNum_","countArr","from","values","maxCount","length","max","apply","conflictPolicy_Add","conflictPolicy_Reset","conflictPolicy_Recreate","conflictPolicy_Update","autoDeleteTarget_ForcedDone","autoDeleteTarget_RealDone","autoDeleteTarget_Done","autoDeleteMode_Delay","autoDeleteMode_Immediately","autoDeleteMode_No","DoneCountManager","props","doneCount","dcProps","delay","clearDelay","doneMap","setTimeout","clearKey","keys","every","dc","keyOrOpts","conflictPolicy","otherOpts","_createDoneCount","reset","_confDoneCount","message","JSON","stringify","arguments","err","Error","doneAgain","autoDelete","options","autoDeleteMode","autoDeleteTarget","delayClearKey","register","unsafeDoneAgain","getDoneCount","undoneNum","getUndoneNum","_doneMap","_clearDelay","_conflictPolicy","_autoDeleteTarget","_autoDeleteMode","info","allDone","push","NamedDoneCountManager","confOpts","__WEBPACK_EXTERNAL_MODULE__1__"],"mappings":"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","file":"done-count.amd.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {createUniqueIdentifier} from 'com-tools'\n\n/**\n * DoneCount\n * 完成计数\n * 用于统计一组操作的完成情况\n */\nexport class DoneCount{\n\n  /**\n   * forcedDone : boolean     强制完成标识\n   */\n  forcedDone = false;\n\n\n\n  //总数量\n  get total(){\n    if (this.oriTotal == undefined){\n      this.oriTotal = 1;\n    }\n    return this.oriTotal;\n  }\n  set total(newValue){\n    this.oriTotal = newValue;\n  }\n\n\n  //已完成数量\n  get doneNum(){\n    if (!this._doneNum){\n      this._doneNum = 0;\n    }\n\n    return this._doneNum;\n  }\n\n  set doneNum(newValue){\n    this._doneNum = newValue || 0;\n  }\n\n\n  /**\n   *\n   * @param totalOrOptions : DoneCountOptions\n   * DoneCountOptions = total:number | DoneCountProps\n   * DoneCountProps = {total:number,doneNum:number}\n   */\n  constructor(totalOrOptions){\n    if (typeof totalOrOptions == \"object\"){\n      var {total,...otherProps} = totalOrOptions;\n    }else {\n      total = totalOrOptions;\n    }\n\n\n    this.total = total;\n\n    if (otherProps){\n      Object.assign(this,otherProps);\n    }\n  }\n\n  get undoneNum(){\n    let total = this.total;\n    let doneNum = this.doneNum;\n    return total < doneNum ? 0 : total - doneNum;\n  }\n\n\n  /**\n   * done : boolean   只读；表示是否完成\n   */\n  get done(){\n    return this.forcedDone || this.realDone\n  }\n\n  /**\n   * realDone : boolean   只读；表示实际上是否真正的完成\n   */\n  get realDone(){\n    return this.total <= this.doneNum\n  }\n\n\n\n  /**\n   * 重置\n   */\n  reset(){\n    this.total = 1;\n    this.resetDoneNum();\n  }\n\n  /**\n   * 重置\n   */\n  resetDoneNum(){\n    this.doneNum = 0;\n  }\n\n\n\n  /**\n   * 登录新的完成次数\n   * @param num : number\n   * @returns boolean 是否完成\n   */\n  doneAgain(num = 1){\n    this.doneNum += num;\n    return this.done\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\nexport class NamedDoneCount extends DoneCount{\n\n  /**\n   *\n   * @param totalOrOptions : NamedDoneCountOptions\n   * NamedDoneCountOptions = total:number | NamedDoneCountProps\n   * NamedDoneCountProps = {...DoneCountProps,namesOrNum : Names | DoneNum,names: Names,autoIncrTotalIfRepeat:boolean,maxRepetNum:number}\n   *\n   * Names : string | [string]\n   * DoneNum : number\n   */\n  constructor(totalOrOptions){\n\n    if (typeof totalOrOptions == \"object\"){\n      var {total,namesOrNum,names,doneNum,...otherProps} = totalOrOptions;\n    }else {\n      total = totalOrOptions;\n    }\n\n    super(total);\n    this.total = total;\n\n    if (names) {\n      this.doneAgainNames(names);\n    }else if (doneNum != undefined){\n      this._doneNum = doneNum;\n    } else {\n      this.doneNum = namesOrNum\n    }\n\n    if (otherProps){\n      Object.assign(this,otherProps);\n    }\n\n  }\n\n\n  /**\n   * 当 name 重复时，是否自动增长 total\n   * @type {boolean}\n   */\n  autoIncrTotalIfRepeat;\n\n\n  get total(){\n    return this.autoIncrTotalIfRepeat ? this.oriTotal * (this.maxNameNum || 1) : this.oriTotal;\n  }\n\n  set total(newValue){\n    this.oriTotal = newValue;\n  }\n\n  get oriTotal(){\n    if (this._oriTotal == undefined){\n      this._oriTotal = 1;\n    }\n    return this._oriTotal;\n  }\n  set oriTotal(newValue){\n    this._oriTotal = newValue;\n  }\n\n\n\n\n  get nameRecord(){\n    if (!this._nameRecord) {\n      this._nameRecord = new Map();\n    }\n\n    return this._nameRecord;\n  }\n\n  /**\n   * 最大重复数目\n   * @type {number}\n   */\n  get maxRepetNum(){\n    let _maxRepetNum = this._maxRepetNum;\n    return (_maxRepetNum && _maxRepetNum > 0) ? _maxRepetNum : Infinity ;\n  }\n\n  set maxRepetNum(newValue){\n    this._maxRepetNum = newValue;\n  }\n\n\n  /**\n   * 获取所有 name 的总计数\n   * @returns {number}\n   */\n  get nameNum(){\n    let _nameNum = 0;\n    let maxRepetNum = this.maxRepetNum;\n    this.nameRecord.forEach((count,key)=>{\n      _nameNum += Math.min(count,maxRepetNum);\n    });\n\n    return _nameNum;\n  }\n\n\n  get _doneNum(){\n    if (this._doneNum_ == undefined){\n      this._doneNum_ = 0;\n    }\n\n    return this._doneNum_;\n  }\n\n  set _doneNum(newValue){\n    this._doneNum_ = newValue;\n  }\n\n\n  get doneNum(){\n    return this.nameNum + this._doneNum;\n  }\n\n  set doneNum(newValue){\n\n    if (typeof newValue == \"number\"){\n      var oldNum = this.doneNum;\n\n      if (oldNum < newValue) {\n        this._doneNum = newValue - this.nameNum;\n      }else {\n        this.resetDoneNum();\n        this._doneNum = newValue;\n      }\n\n    }else if (newValue == undefined) {\n      this.resetDoneNum();\n    } else {\n      this.doneAgainNames(newValue);\n    }\n\n  }\n\n\n\n\n\n  /**\n   * 重置\n   */\n  resetDoneNum(){\n    this.nameRecord.clear();\n    this._doneNum = 0;\n  }\n\n\n\n  /**\n   *\n   * @param namesOrNum : DoneNamesOrNum\n   * DoneNamesOrNum = number | DoneNames\n   * DoneNames = string | [string]\n   * @returns {*}\n   */\n  doneAgain(namesOrNum = 1){\n\n    if (typeof namesOrNum == \"number\") {\n      this._doneNum += namesOrNum;\n    }else {\n      this.doneAgainNames(namesOrNum)\n    }\n    return this.done\n  }\n\n\n  /**\n   * @param names : DoneNames\n   * @returns {*}\n   */\n  doneAgainNames(names){\n\n    if(!Array.isArray(names)){\n      names = [names];\n    }\n    let nameRecord = this.nameRecord;\n    names.forEach((nm)=>{\n      let nameCount = nameRecord.get(nm) || 0;\n      nameRecord.set(nm, ++nameCount);\n    });\n\n    return this.done;\n  }\n\n\n  has(name){\n    return this.nameRecord.has(name);\n  }\n\n\n  /**\n   * 获取指定 name 的计数\n   * @param name\n   * @returns {*|number}\n   */\n  getNameNum(name){\n    let nameNum = this.nameRecord.get(name) || 0;\n    return Math.min(nameNum,this.maxRepetNum);\n  }\n\n\n  /**\n   * 获取最大的 name 计数\n   * @returns {number}\n   */\n  get maxNameNum(){\n    let countArr = Array.from(this.nameRecord.values());\n    let maxCount = countArr.length > 0 ? Math.max.apply(Math,countArr) : 0;\n\n    return Math.min(maxCount,this.maxRepetNum);\n  }\n\n\n\n}\n\n\n\n\n\n/**\n * 冲突策略 ConflictPolicy 类型常量\n * ConflictPolicy = \"Add\" | \"Reset\" | \"Recreate\" | \"Update\"\n */\nexport const conflictPolicy_Add = \"Add\";\nexport const conflictPolicy_Reset = \"Reset\";\nexport const conflictPolicy_Recreate = \"Recreate\";\nexport const conflictPolicy_Update = \"Update\"\n\n\n\n\n\n/**\n * 自动删除目标 AutoDeleteTarget 类型常量\n * AutoDeleteTarget = \"ForcedDone\" | \"RealDone\" | \"Done\"\n */\nexport const autoDeleteTarget_ForcedDone = \"ForcedDone\";\nexport const autoDeleteTarget_RealDone = \"RealDone\";\nexport const autoDeleteTarget_Done = \"Done\";\n\n\n\n/**\n * 自动删除目标 AutoDeleteMode 类型常量\n * AutoDeleteMode = \"Delay\" | \"Immediately\" | \"No\"\n */\nexport const autoDeleteMode_Delay = \"Delay\";\nexport const autoDeleteMode_Immediately = \"Immediately\";\nexport const autoDeleteMode_No = \"No\";\n\n\n\n\n\n\nexport class DoneCountManager {\n\n  /**\n   * props : DCManagerProps\n   * DCManagerProps = {clearDelay:number,conflictPolicy : ConflictPolicy ,autoDeleteTarget:AutoDeleteTarget ,autoDeleteMode:AutoDeleteMode}\n   * @param props\n   */\n  constructor(props={}) {\n    Object.assign(this,props)\n  }\n\n\n\n\n  get doneMap(){\n    if (!this._doneMap){\n      this._doneMap = new Map();\n    }\n\n    return this._doneMap;\n  }\n\n\n  set doneMap(newValue){\n    this._doneMap = newValue;\n  }\n\n\n  /**\n   * 创建 DoneCount 实例\n   * @param totalOrOptions : DoneCountOptions\n   * @returns {DoneCount}\n   */\n  _createDoneCount(totalOrOptions){\n    return new DoneCount(totalOrOptions);\n  }\n\n  /**\n   * 在不改变完成数的情况下，根据 confOpts 配置 doneCount\n   * @param doneCount : DoneCount\n   * @param dcProps : DoneCountProps\n   * @returns {*}\n   * @private\n   */\n  _confDoneCount(doneCount,dcProps){\n    let {doneNum,...otherProps} = dcProps;\n    Object.assign(doneCount,otherProps);\n    return doneCount;\n  }\n\n\n  /**\n   * 设置 延迟清除已完成的 DoneCount 的延时时间\n   * @returns {number|*}\n   */\n  get clearDelay(){\n    if (this._clearDelay == undefined){\n      this._clearDelay = 100;\n    }\n\n    return this._clearDelay;\n  }\n\n  set clearDelay(newValue){\n    this._clearDelay = newValue;\n  }\n\n\n  /**\n   * 延迟删除指定 key 的 DoneCount\n   * @param key : DoneCountKey  需要被延迟删除的 DoneCount 的 key\n   * @param delay ?: number   可选；默认值：this.clearDelay； 延时时间；\n   *\n   * 注意：\n   * - 只有 当 doneCount 已经完成时 才会被删除，否则，不会被删除；\n   */\n  delayClearKey(key,delay = this.clearDelay) {\n    let doneCount = this.doneMap.get(key);\n    if (doneCount.done) {\n      setTimeout(() => {\n        this.clearKey(key);\n      }, delay);\n    }\n  }\n\n\n  /**\n   * 删除指定 key 的 DoneCount\n   * @param key : DoneCountKey  需要被删除的 DoneCount 的 key\n   * @return boolean  表示是否完成删除；\n   *\n   * 注意：\n   * - 只有 当 doneCount 已经完成时 才会被删除，否则，不会被删除；\n   * - 当指定 key 的 doneCount 不存时，也会 返回 true ；\n   */\n  clearKey(key) {\n\n    let doneMap = this.doneMap;\n\n    let doneCount = doneMap.get(key);\n    let done = doneCount ? doneCount.done : true;\n    if (doneCount && done) {\n      doneMap.delete(key);\n    }\n    return done;\n\n  }\n\n  clear(){\n    let keyArr = Array.from(this.doneMap.keys());\n    return keyArr.every( (key)=> {\n      return this.clearKey(key)\n    });\n  }\n\n\n  forcedDoneKey(key){\n    let doneCount = this.doneMap.get(key);\n    if (doneCount){\n      doneCount.forcedDone = true;\n    }\n  }\n\n  forcedDone(){\n    this.doneMap.forEach((dc)=>{\n      dc.forcedDone = true;\n    });\n  }\n\n\n  /**\n   * 注册 DoneCount 时，当 注册的 DoneCount 的 total 和 已存在的 DoneCount 的 total 不一致时 的处理方式\n   * @returns {string|*}\n   */\n  get conflictPolicy(){\n    if (!this._conflictPolicy){\n      this._conflictPolicy = conflictPolicy_Recreate;\n    }\n\n    return this._conflictPolicy;\n  }\n\n\n  set conflictPolicy(newValue){\n    this._conflictPolicy = newValue;\n  }\n\n\n\n  /**\n   * 注册DoneCount\n   * @param keyOrOpts : DoneAgainOptions\n   *\n   * DoneAgainOptions = key | {key,conflictPolicy,...DoneCountProps}\n   * @returns {DoneCount}\n   */\n  register(keyOrOpts){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,total = 1,conflictPolicy,...otherOpts} = keyOrOpts;\n    }else {\n      key = keyOrOpts;\n      total = 1;\n    }\n\n    conflictPolicy = conflictPolicy || this.conflictPolicy;\n\n    let doneMap = this.doneMap;\n    let doneCount = doneMap.get(key);\n    if  (!doneCount || doneCount.realDone ){\n      doneCount =  this._createDoneCount(total);\n    }else if (doneCount.oriTotal != total){\n\n      switch (conflictPolicy) {\n        case conflictPolicy_Recreate:{\n          doneCount  = this._createDoneCount(total);\n          break;\n        }\n        case conflictPolicy_Add:{\n          doneCount.total += total;\n          break;\n        }\n        case conflictPolicy_Reset:{\n          doneCount.reset();\n          doneCount.total = total;\n          break;\n        }\n        case conflictPolicy_Update:{\n          doneCount.total = total;\n          break;\n        }\n\n      }\n\n    }\n\n    if (otherOpts){\n      doneCount = this._confDoneCount(doneCount,otherOpts);\n    }\n\n    doneMap.set(key,doneCount);\n\n    return doneCount;\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param doneNum\n   * @returns DoneCount | Error\n   */\n  unsafeDoneAgain(keyOrOpts,doneNum = 1){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,doneNum = 1,...otherProps} = keyOrOpts;\n    }else {\n      key = keyOrOpts;\n    }\n\n    let doneCount = this.doneMap.get(key);\n\n    if (!doneCount){\n      // console.error(\"不存在 key 为 %s 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: %o\",key,arguments);\n      let message = `不存在 key 为 ${key} 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: ${JSON.stringify(arguments)}`;\n      let err = new Error(message);\n      err.name = \"DoneCountManager\"\n      return err;\n    }\n\n    doneCount.doneAgain(doneNum);\n\n    this.autoDelete(key,otherProps);\n    return doneCount;\n  }\n\n\n\n\n  /**\n   * autoDeleteTarget : AutoDeleteTarget    自动删除目标\n   */\n  get autoDeleteTarget(){\n    if (!this._autoDeleteTarget) {\n      this._autoDeleteTarget = autoDeleteTarget_RealDone;\n    }\n\n    return this._autoDeleteTarget;\n  }\n\n  set autoDeleteTarget(newValue){\n    this._autoDeleteTarget = newValue;\n  }\n\n\n\n\n\n  /**\n   * autoDeleteMode : AutoDeleteMode   自动删除模式\n   */\n  get autoDeleteMode(){\n    if (!this._autoDeleteMode) {\n      this._autoDeleteMode = autoDeleteMode_Delay;\n    }\n\n    return this._autoDeleteMode;\n  }\n\n  set autoDeleteMode(newValue){\n    this._autoDeleteMode = newValue;\n  }\n\n\n  /**\n   * 根据配置 options ，自动删除指定 key 的 DoneCount\n   * @param key : DoneCountKey    被自动删除的 DoneCount 的 key\n   * @param options ?: AutoDeleteOptions   可选；配置选项\n   *\n   * AutoDeleteOptions = {autoDeleteMode : AutoDeleteMode,autoDeleteTarget : AutoDeleteTarget,clearDelay : number}\n   */\n  autoDelete(key,options = {}){\n    let {autoDeleteMode = this.autoDeleteMode,autoDeleteTarget = this.autoDeleteTarget,clearDelay} = options;\n\n    let doneCount = this.doneMap.get(key);\n    switch (autoDeleteTarget) {\n      case autoDeleteTarget_RealDone:{\n        if (!doneCount.realDone){\n          return;\n        }\n        break;\n      }\n\n      case autoDeleteTarget_ForcedDone:{\n        if (!doneCount.forcedDone){\n          return;\n        }\n        break;\n      }\n\n    }\n\n    switch (autoDeleteMode) {\n      case autoDeleteMode_Delay:{\n        this.delayClearKey(key,clearDelay);\n        break;\n      }\n\n      case autoDeleteMode_Immediately:{\n        this.clearKey(key);\n        break;\n      }\n\n    }\n\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param doneNum : DoneNamesOrNum\n   * @returns {*}\n   */\n  doneAgain(keyOrOpts,doneNum = 1){\n    this.register(keyOrOpts);\n    return this.unsafeDoneAgain(keyOrOpts,doneNum);\n  }\n\n\n  getDoneCount(key){\n    return this.doneMap.get(key);\n  }\n\n\n\n  getUndoneNum(key){\n    var dc = this.getDoneCount(key);\n    return dc?dc.undoneNum : 0;\n  }\n\n  getDone(key){\n    return this.getUndoneNum(key) == 0 ;\n  }\n\n\n\n\n  get info(){\n    let info = {total:0,doneNum:0,undoneNum:0};\n    let keys = [];\n    let allDone = true;\n    this.doneMap.forEach((dc,key)=>{\n      info.total += dc.total;\n      info.doneNum += dc.doneNum;\n      info.undoneNum += dc.undoneNum;\n      keys.push(key);\n\n      if (!dc.done) {\n        allDone = false;\n      }\n    });\n\n    info.keys = keys;\n    info.allDone = allDone;\n\n    return info;\n  }\n\n\n  get total(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.total;\n    });\n    return total;\n  }\n\n\n\n  get doneNum(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.doneNum;\n    });\n    return total;\n  }\n\n\n\n  get undoneNum(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.undoneNum;\n    });\n    return total;\n  }\n\n  get done(){\n    let allDone = true;\n    this.doneMap.forEach((dc,key)=>{\n      if (!dc.done) {\n        allDone = false;\n      }\n    });\n\n    return allDone;\n  }\n\n\n}\n\n\n\n\n\n\n\n\nexport class NamedDoneCountManager extends DoneCountManager{\n\n\n  /**\n   * 创建 DoneCount 实例\n   * @param totalOrOptions\n   * @returns {DoneCount}\n   */\n  _createDoneCount(totalOrOptions){\n    return new NamedDoneCount(totalOrOptions);\n  }\n\n\n\n  /**\n   * DoneCount 的 autoIncrTotalIfRepeat 的默认值\n   * @type {boolean}\n   */\n  autoIncrTotalIfRepeat;\n\n\n  /**\n   * 在不改变完成数的情况下，根据 confOpts 配置 doneCount\n   * @param doneCount\n   * @param confOpts\n   * @returns {*}\n   * @private\n   */\n  _confDoneCount(doneCount,confOpts){\n    let {namesOrNum,names,doneNum,autoIncrTotalIfRepeat = this.autoIncrTotalIfRepeat,...otherOpts} = confOpts;\n    otherOpts.autoIncrTotalIfRepeat = autoIncrTotalIfRepeat;\n\n    Object.assign(doneCount,otherOpts);\n    return doneCount;\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param namesOrNum : DoneNamesOrNum\n   * @returns DoneCount | Error\n   *\n   * DoneAgainOptions = {key,namesOrNum,names,doneNum,...}\n   */\n  unsafeDoneAgain(keyOrOpts,namesOrNum = 1){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,namesOrNum,names,doneNum,...otherProps} = keyOrOpts;\n      namesOrNum = doneNum || namesOrNum || 1;\n    }else {\n      key = keyOrOpts;\n    }\n\n    let doneCount = this.doneMap.get(key);\n\n    if (!doneCount){\n      // console.error(\"不存在 key 为 %s 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: %o\",key,arguments);\n      let message = `不存在 key 为 ${key} 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: ${JSON.stringify(arguments)}`;\n      let err = new Error(message);\n      err.name = \"DoneCountManager\"\n      return err;\n    }\n\n    if (names) {\n      doneCount.doneAgainNames(names);\n    } else {\n      doneCount.doneAgain(namesOrNum)\n    }\n\n    this.autoDelete(key,otherProps);\n    return doneCount;\n  }\n\n\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;"],"sourceRoot":""}