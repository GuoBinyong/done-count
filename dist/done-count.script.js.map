{"version":3,"sources":["webpack://dc/webpack/bootstrap","webpack://dc/./node_modules/es-expand/src/Object.js","webpack://dc/./node_modules/es-expand/src/Array.js","webpack://dc/./node_modules/es-expand/src/JSON.js","webpack://dc/./node_modules/es-expand/src/String.js","webpack://dc/./node_modules/es-expand/src/Math.js","webpack://dc/./node_modules/es-expand/src/Number.js","webpack://dc/./node_modules/es-expand/src/Date.js","webpack://dc/./node_modules/com-tools/src/ByURL.js","webpack://dc/./node_modules/com-tools/src/index.js","webpack://dc/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","propertyDescriptors","findKey","testFun","keys","this","find","index","propValue","findProperty","prop","entries","entry","propInfo","isFlat","values","some","propType","noKeys","length","getValuesOfKeys","_this","reduce","total","currentKey","push","getVirtualValuesOfKeys","currValue","undefined","findValueOfKeys","findValue","valid","getValuesForKeyFormats","formats","keyStrList","getAllStrForFormats","getVirtualValuesForKeyFormats","findValueForKeyFormats","isSubsetOf","universalObj","equalTest","a","b","every","entrie","depthLoopOwnProperty","callback","depth","all","thisValue","initDepth","keyList","getOwnPropertyNames","stopInfo","depthLoopPropertyWithPrototype","filterProperty","filter","arguments","preValue","entr","defineProperties","assignKeys","target","sources","keysSourceList","map","source","newSource","aKey","aValue","assign","assignExcludeKeys","allKeys","getComplementOn","assignIncludeAndExcludeKeys","options","getIncludeAndExclude","obj","ownProps","resArray","Array","fromEntries","defineProxyProperty","proxy","set","configurable","getDefault","setDefault","descriptor","newValue","defineProxyProperties","props","propsObj","isArray","propName","forEach","propOpts","isDepthEqual","nullNotEqualUndefined","is","aType","bType","aClassName","constructor","bClassName","toString","getTime","isArr","leading","bValue","aEntrs","bEntrs","aEntr","getNoRepeats","currentItem","arr","indexOf","getNoRepeatsUseRepeatTest","isRepeated","findIndex","findItem","safelyOperateIndexs","indexList","operation","itemList","currentValue","includes","currentIndex","safelyOperateItems","itemListCopy","item","safelyFilter","slice","move","fromIndex","toIndex","moveEleArr","splice","moveTo","fromIndexs","moveItems","deleteIndexs","moveItemsTo","items","indexArr","deleteItems","moveToUseTest","needMoveTest","deleteUseTest","insertItem","deleItems","insertItemList","reduceRight","deleItemList","unshift","delete","start","end","indexs","currentArray","needDeleteTest","filterIndexs","filterTest","thisArg","lastItem","isContains","thisItem","getIntersection","thisEle","arrEle","isIntersect","universalArr","arrItem","include","exclude","valids","reverseIndexForIndex","queuePush","queuePop","pop","queueUnshift","len","queueShift","shift","intersectionOf","arrays","sort","arr1","arr2","leastArr","isArrayLike","Number","isInteger","extendJSON","extended","safelyParse","text","reviver","parseInfo","parsed","result","JSON","parse","e","depthStringify","replacer","space","newTarget","stringify","depthParse","correctParse","isJSONString","isJSON","oriJSON","globalThis","_JSON","String","noChars","test","capFirstLetter","replace","match","p1","p2","toUpperCase","toSeparatorLineFormat","separator","caseType","lowerCase","targetStr","offset","oriStr","matchStr","toLowerCase","errorSeparatorRex","RegExp","toCamelFormat","separatorRex","format","isURL","Math","distanceSort","nums","numList","firstNum","disSort","abs","nearest","farthest","lastIndex","isFinite","floor","Date","getDayNumberOfMonth","year","month","date","initValue","setMonthOffset","setDate","dayNum","getDate","getDayNumber","setYearOffset","num","getFullYear","setFullYear","getMonth","setMonth","setDateOffset","setHourOffset","getHours","setHours","setMinuteOffset","getMinutes","setMinutes","setSecondOffset","getSeconds","setMillisecondOffset","getMilliseconds","setMilliseconds","_paramsPropJSONParse","_paramsPropJSONStringify","params","queryStringify","queryPrefix","paramsPropStringify","paramList","kvArr","array","keyStr","encodeURIComponent","queryString","join","parseQueryString","paramsPropParse","preIndex","anrIndex","substring","split","kvStr","kvList","decodeURIComponent","objectPropertyDescriptors","toJSONqueryStringify","JSONQueryStringify","stringPropertyDescriptors","urlJSONQueryObj","arrayPropertyDescriptors","multipleLoop","loopCall","complete","stepComplete","step","delay","loopOpt","stepCount","POSITIVE_INFINITY","stop","setStop","loop","needLoop","timeoutId","atuoSingleLoop","singleTotal","min","setTimeout","clearTimeout","DoneCount","totalOrOptions","otherProps","oriTotal","_doneNum","resetDoneNum","doneNum","done","forcedDone","realDone","NamedDoneCount","namesOrNum","names","doneAgainNames","nameRecord","clear","nm","nameCount","has","nameNum","maxRepetNum","autoIncrTotalIfRepeat","maxNameNum","_oriTotal","_nameRecord","Map","_maxRepetNum","Infinity","_nameNum","count","_doneNum_","countArr","from","maxCount","max","apply","conflictPolicy_Add","conflictPolicy_Reset","conflictPolicy_Recreate","conflictPolicy_Update","autoDeleteTarget_ForcedDone","autoDeleteTarget_RealDone","autoDeleteTarget_Done","autoDeleteMode_Delay","autoDeleteMode_Immediately","autoDeleteMode_No","DoneCountManager","doneCount","dcProps","clearDelay","doneMap","clearKey","dc","keyOrOpts","conflictPolicy","otherOpts","_createDoneCount","reset","_confDoneCount","message","err","Error","doneAgain","autoDelete","autoDeleteMode","autoDeleteTarget","delayClearKey","register","unsafeDoneAgain","getDoneCount","undoneNum","getUndoneNum","_doneMap","_clearDelay","_conflictPolicy","_autoDeleteTarget","_autoDeleteMode","info","allDone","NamedDoneCountManager","confOpts"],"mappings":"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","file":"done-count.script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\n/*\n 使用属性描述来定义属性的原因：\n - 为了不让 for...in 等类似的操作遍历这些定义在原型上的方法或属性，需要将属性设置为不可枚举的；\n - 为了解决给 Object.prototype 添加属性会在Vue中报错的问题，需要将属性设置为不可枚举的；\n\n\n 注意：\n - Object.prototype 和  Object 上不能定义同名成员；\n */\n\n\n\nlet propertyDescriptors = {\n\n\n  /**\n   * 找出对象中符合测试函数的属性名\n   * @param testFun:(propValue,propkey,index)=> boolean  ; 测试条件函数\n   */\n  findKey: {\n    enumerable: false,\n    value: function (testFun) {\n      return Object.keys(this).find((key, index) => {\n        let propValue = this[key];\n        return testFun(propValue, key, index);\n      });\n\n    }\n  },\n\n\n  /**\n   * 找出对象中符合测试函数的属性信息\n   * @param testFun:(propValue,propkey,index)=> boolean  ; 测试条件函数\n   * @return PropertyInfo : {key:string,value:any}\n   */\n  findProperty: {\n    enumerable: false,\n    value: function (testFun) {\n\n      let prop = Object.entries(this).find((entry, index) => {\n        return testFun(entry[1], entry[0], index);\n      });\n\n\n      let propInfo = {\n        key: null,\n        value: null\n      };\n\n      if (prop) {\n        propInfo.key = prop[0];\n        propInfo.value = prop[1];\n      }\n\n      return propInfo;\n    }\n  },\n\n\n  /**\n   * 检验该对象自身是否是扁平的，即：该对象的所有的直接属性的属性值都是非对象类型；\n   */\n  isFlat: {\n    enumerable: false,\n    get: function () {\n      let noFlat = Object.values(this).some(function (propValue) {\n        let propType = typeof propValue;\n        return propValue && (propType === \"object\" || propType === \"function\");\n      });\n\n      return !noFlat;\n    }\n  },\n\n\n\n\n  /**\n   * 返回对象是否是空的对象，即没有自己的可枚举的属性\n   */\n  noKeys:{\n    enumerable:false,\n    get:function(){\n      return Object.keys(this).length == 0;\n    }\n  },\n\n\n\n\n\n  /**\n   * 获取对象中拥有的 相应key的值；\n   * @param keys:[string]  指定的key的数组\n   * @return [any]    对象中拥有的相应key的值\n   */\n  getValuesOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n\n      var _this = this ;\n      return keys.reduce(function(total, currentKey){\n        if (currentKey in _this){\n          total.push(_this[currentKey]);\n        }\n        return total;\n      }, []);\n\n    }\n  },\n\n\n\n  /**\n   * 获取对象中拥有的 相应key的 有效值；\n   * 注意：不包含值为 undefined 或 null 的值\n   * @param keys:[string]  指定的key的数组\n   * @return [any]    对象中拥有的相应key的有效值\n   *\n   */\n  getVirtualValuesOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n\n      var _this = this ;\n      return keys.reduce(function(total, currentKey){\n        var currValue = _this[currentKey] ;\n        if (currValue != undefined){\n          total.push(currValue);\n        }\n        return total;\n      }, []);\n\n    }\n  },\n\n\n\n\n\n  /**\n   * 查找对象中所有指定的属性中的第一个有效值\n   * @param keys : [string]   被查找的属性列表\n   * @returns any  对象中所有指定的属性中的第一个有效值\n   */\n  findValueOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n      var findValue ;\n\n      keys.find(function(currentKey){\n        var currValue = this[currentKey] ;\n        var valid =  currValue != undefined\n        if (valid){\n          findValue = currValue ;\n        }\n        return valid ;\n\n      },this);\n\n\n      return findValue;\n\n    }\n  },\n\n\n\n  /**\n   * 获取对象中所有指定格式的属性的值列表\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [any]  对象中所有指定格式的属性的值列表\n   */\n  getValuesForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.getValuesOfKeys(keyStrList);\n    }\n  },\n\n\n  /**\n   * 获取对象中所有指定格式的属性的有效值列表\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [any]  对象中所有指定格式的属性的值列表\n   */\n  getVirtualValuesForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.getVirtualValuesOfKeys(keyStrList);\n    }\n  },\n\n\n  /**\n   * 查找对象中所有指定格式的属性的第一个有效值\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns any  对象中所有指定格式的属性的第一个有效值\n   */\n  findValueForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.findValueOfKeys(keyStrList);\n    }\n  },\n\n\n\n\n\n  //集合：开始\n\n  /**\n   * 判断当前对象是否是指定对象的子集；即当前对象自己的所有可枚举属性 及 值 是否都包含于 指定的对象上；\n   * @param universalObj : Object   全集对象\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns boolean   当前对象是否是指定对象的子集\n   */\n  isSubsetOf: {\n    enumerable: false,\n    value: function (universalObj,equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      let thisEntries = Object.entries(this);\n\n      return thisEntries.every(function(entrie,index){\n        let key = entrie[0];\n        let value = entrie[1];\n        return equalTest.call(this,value,universalObj[key]);\n      },this);\n\n    }\n  },\n\n\n\n  //集合：结束\n\n\n  /**\n   * depthLoopOwnProperty(callback,depth,all,thisValue,initDepth)=> stopInfo\n   * 递归遍历自身属性链中的所有属性\n   * @param callback : (key,value,obj,currDepth))=> stopInfo : any    必选； 循环遍历的回调函数； key : 当前被遍历的属性名；value : 当前被遍历的属性值；obj : 当前被遍历的属性所属的对象；currDepth : 当前遍历的深度值，从 initDepth 所表示的值开始计数；返回值 stopInfo : 表示是否中止循环，并且该值会被 depthLoopOwnProperty 函数返回，如果返回的值是真值，则终止循环；\n   * @param depth ? : number    可选；默认值：-1 ,即无限深度； 要循环遍历的深度；\n   * @param all ? : boolean    可选；默认值: false ;  是否遍历自身所有的属性，包括不可枚举的；\n   * @param thisValue ? : any    可选；   callback 回调函数的this值 ；默认值：当前被遍历的属性所属的对象；\n   * @param initDepth ? : number   可选；默认值：1；深度的初始值； 注意：设计该属性的主要目的是为了递归调用时记录当前传递当前的深度值的；\n   * @returns stopInfo ： any   终止循环时返回的信息；\n   */\n  depthLoopOwnProperty:{\n    enumerable: false,\n    value:function (callback,depth,all,thisValue,initDepth) {\n      if (depth == undefined){\n        depth = -1;\n      }\n\n      if (depth == 0){\n        return;\n      }\n\n      if (initDepth == undefined){\n        initDepth = 1;\n      }\n\n\n      if (thisValue === undefined) {\n        thisValue = this;\n      }\n\n      if (all){\n        var keyList = Object.getOwnPropertyNames(this);\n      } else {\n        keyList = Object.keys(this);\n      }\n\n      //中止遍历\n      var stopInfo;\n\n      for (let key of keyList){\n        let value = this[key];\n        if (typeof value == \"object\"){\n          stopInfo = value.depthLoopOwnProperty(callback,depth-1,all,thisValue,initDepth+1);\n          if (stopInfo){\n            break;\n          }\n        }\n\n        stopInfo = callback.call(thisValue,key,value,this,initDepth);\n        if (stopInfo){\n          break;\n        }\n\n      }\n\n\n      return stopInfo;\n    }\n\n\n  },\n\n\n\n  /**\n   * depthLoopPropertyWithPrototype(callback,depth,thisValue,initDepth)=> stopInfo\n   * 递归遍历自身包括原型的属性链中的所有可枚举的属性\n   * @param callback : (key,value,obj,currDepth))=>stopInfo : any    必选； 循环遍历的回调函数； key : 当前被遍历的属性名；value : 当前被遍历的属性值；obj : 当前被遍历的属性所属的对象；currDepth : 当前遍历的深度值，从 initDepth 所表示的值开始计数；返回值 stopInfo : 表示是否中止循环，并且该值会被 depthLoopOwnProperty 函数返回，如果返回的值是真值，则终止循环；\n   * @param depth ? : number    可选；默认值：-1 ,即无限深度； 要循环遍历的深度；\n   * @param thisValue ? : any    可选；   callback 回调函数的this值 ；默认值：当前被遍历的属性所属的对象；\n   * @param initDepth ? : number   可选；默认值：1；深度的初始值； 注意：设计该属性的主要目的是为了递归调用时记录当前传递当前的深度值的；\n   * @returns stopInfo ： any   终止循环时返回的信息；\n   */\n  depthLoopPropertyWithPrototype:{\n    enumerable: false,\n    value:function (callback,depth,thisValue,initDepth) {\n      if (depth == undefined){\n        depth = -1;\n      }\n\n      if (depth == 0){\n        return;\n      }\n\n      if (initDepth == undefined){\n        initDepth = 1;\n      }\n\n\n      if (thisValue === undefined) {\n        thisValue = this;\n      }\n\n      //中止遍历\n      var stopInfo;\n\n      for (let key in this){\n\n        let value = this[key];\n        if (typeof value == \"object\"){\n          stopInfo = value.depthLoopPropertyWithPrototype(callback,depth-1,thisValue,initDepth+1);\n          if (stopInfo){\n            break;\n          }\n        }\n\n        stopInfo = callback.call(thisValue,key,value,this,initDepth);\n        if (stopInfo){\n          break;\n        }\n      }\n\n      return stopInfo;\n\n    }\n  },\n\n\n  /**\n   * filterProperty(filter,thisValue)\n   * 返回包含符合条件的所有属性的新对象\n   * @param filter : (key,value,obj)=>boolean    必选；\n   * @param thisValue ? : any   可选；默认值：当前对象； filter 函数的this 值；\n   * @returns Object   返回包含符合条件的所有属性的新对象\n   */\n  filterProperty:{\n    enumerable: false,\n    value:function (filter,thisValue) {\n      if (arguments.length < 2){\n        thisValue = this;\n      }\n\n      return Object.entries(this).reduce((preValue,entr)=> {\n        var key = entr[0];\n        var value  = entr[1];\n        if (filter.call(thisValue,key,value,this)){\n          preValue[key] = value;\n        }\n        return preValue;\n      },{});\n    },\n  },\n\n\n};\n\n\nObject.defineProperties(Object.prototype, propertyDescriptors);\n\n\n/**\n * 用于将所有指定的属性的值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param keys : Array<String>   需要复制的属性名数组\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n */\n\nObject.assignKeys = function (target,keys,...sources){\n\n  if (keys) {\n\n    let keysSourceList = sources.map(function (source) {\n\n      return keys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n/**\n * 用于将所有指定的属性之外的所有属性和值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param keys : Array<String>   需要排除的属性名数组\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n */\n\nObject.assignExcludeKeys = function (target,keys,...sources){\n\n  if (keys) {\n\n    let keysSourceList = sources.map(function (source) {\n      let allKeys = Object.keys(source);\n      let validKeys = keys.getComplementOn(allKeys);\n\n      return validKeys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n\n/**\n * 用于将所有符合 options 配置 的属性和值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param options : IncludeAndExcludeKeysOptions  必须；配置 包含 和 排除 的 key 的 数组 的 选项；\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n *\n * IncludeAndExcludeKeysOptions = {include ?: Array,exclude ?: Array}\n */\n\nObject.assignIncludeAndExcludeKeys = function (target,options,...sources){\n\n  if (options && !options.noKeys) {\n\n    let keysSourceList = sources.map(function (source) {\n      let allKeys = Object.keys(source);\n      let validKeys = allKeys.getIncludeAndExclude(options);\n\n      return validKeys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n\n\n\n\n\n//兼容：开始\n\n//Object.entries(obj)\nif (!Object.entries) {\n  Object.entries = function( obj ){\n    var ownProps = Object.keys( obj ),\n      i = ownProps.length,\n      resArray = new Array(i);\n    while (i--){\n      var key = ownProps[i];\n      resArray[i] = [key, obj[key]];\n    }\n\n    return resArray;\n  };\n}\n\n\n\n\n//Object.fromEntries(entries)\nif (!Object.fromEntries) {\n  Object.fromEntries = function( entries ){\n    return entries.reduce(function(obj, entry){\n      obj[entry[0]] = entry[1];\n      return obj;\n    }, {});\n  };\n}\n\n\n\n//兼容：结束\n\n\n\n\n\n\n\n\n\n\n/**\n * 定义代理属性； 给 对象 proxy 增加 能够代理 target 对象 的 属性 prop；\n * 当在 访问或配置 proxy 对象上的 prop 属性时，会将操作转发到 target 对象的 prop 属性；\n *\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param prop : Property   必选；代理属性的名字；\n * @param options ?: ProxyOptions  代理属性的配置选项\n *\n * ProxyOptions = {get:boolean,set:boolean,configurable:boolean,enumerable:boolean,getDefault,setDefault}\n * get:boolean  可选；默认值：true； 表示是否要定义 get 的代理；\n * set:boolean  可选；默认值：true； 表示是否要定义 set 的代理；\n * configurable:boolean  可选；默认值：true； 表示该属性描述符的类型是否可以被改变并且该属性可以从对应对象中删除。\n * enumerable:boolean  可选；默认值：true； 表示当在枚举相应对象上的属性时该属性是否显现。\n * getDefault:any  可选；当 target 的属性 prop 为 undefined 时，proxy 会返回默认值 getDefault\n * setDefault:any  可选；当给代理对象 proxy 的 prop 属性 设置的 新值是 undefined 时，会将默认值 setDefault 设置 到 target 对象的 prop 属性上；\n *\n * @returns proxy : Object  传递给函数的 代理对象 proxy\n */\n\nObject.defineProxyProperty = function (proxy,target,prop, options) {\n  var {get = true,set = true,configurable = true,enumerable = true,getDefault,setDefault} = options || {};\n\n  var descriptor = {configurable,enumerable};\n\n  if (get){\n    descriptor.get = function () {\n      var propValue = target[prop];\n      return propValue === undefined ? getDefault : propValue;\n    };\n  }\n\n  if (set){\n    descriptor.set = function (newValue) {\n      newValue = newValue === undefined ? setDefault : newValue;\n      target[prop] = newValue;\n    };\n  }\n\n\n  Object.defineProperty(proxy,prop,descriptor);\n  return proxy;\n};\n\n\n\n\n\n/**\n * 批量定义代理属性\n *\n * 接口1：defineProxyProperties(proxy,target,propOptions)\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param propOptions : {propName:ProxyOptions}   必选；要定义的代理属性的配置对象；以该配置对象的属性名为 要配置的属性的名字，以其值为 本配置的属性的 配置选项\n * @returns proxy : Object  传递给函数的 代理对象 proxy\n *\n *\n * 接口2：defineProxyProperties(proxy,target,propArray,options)\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param propArray : [string]   必选；要定义的代理属性的名字的列表。\n * @param options ?: ProxyOptions     可选；所有代理属性的配置选项\n *\n *  @returns proxy : Object  传递给函数的 代理对象 proxy\n */\nObject.defineProxyProperties = function (proxy,target,props, options) {\n  var propsObj = props;\n  if (Array.isArray(props)) {\n    propsObj = props.reduce(function (total,propName) {\n      total[propName] = options;\n      return total;\n    },{});\n  }\n\n\n\n  Object.keys(propsObj).forEach(function (propName) {\n    let propOpts = propsObj[propName];\n    Object.defineProxyProperty(proxy,target,propName,propOpts);\n  });\n\n  return proxy;\n};\n\n\n/**\n * isDepthEqual(a, b, nullNotEqualUndefined)\n * 深度测试  a 和 b 是否完全相等；如果 a 和 b 是 对象，会进行递归相等测试，只有所有的属性 都相等时，才会认为是相等的；\n *\n * 注意：\n * - 对于 值为 undefined 的属性 和 不存在的属性 认为是相等的属性；\n * - 对于 对于 函数 ，如果整个函数的代码字符（fun.toString()）串相等，则认为函数是相等的；\n * - 目前只判断了 基础类型、Object、Array、function、Date 类型；\n *\n * @param a : any\n * @param b : any\n * @param nullNotEqualUndefined ? : boolean    可选；默认值：false;  是否把 null 和 undefined 作为不等的值来对待\n * @return boolean\n */\nObject.isDepthEqual = function isDepthEqual(a, b, nullNotEqualUndefined) {\n\n  if (a === b || Object.is(a,b)) {\n    return true\n  }\n\n  if (!nullNotEqualUndefined && a == null && a == b) {\n    return true;\n  }\n\n  var aType = typeof a;\n  var bType = typeof b;\n  if (a != undefined && b != undefined){\n    var aClassName = a.constructor.name;\n    var bClassName = b.constructor.name;\n  }\n\n\n  if (aType != bType ) {\n    if (aClassName && aClassName == bClassName){ //测试 基础类型 与 其包装类型 的相等性\n      return a == b;\n    }\n    return false;\n  }\n\n  if  (aType == \"function\"){\n    return  a == b || a.toString() == b.toString() ;\n  }\n\n  if (aType == \"Date\"){\n    return  a.getTime() == b.getTime();\n  }\n\n  if (aType == \"object\") {\n    var isArr = Array.isArray(a);\n    if (isArr != Array.isArray(b)) {\n      return false;\n    }\n\n    if (isArr) {\n      if (a.length != b.leading) {\n        return false;\n      }\n\n      return a.every(function (aValue, index) {\n        var bValue = b[index];\n        return Object.isDepthEqual(aValue, bValue, nullNotEqualUndefined);\n      });\n\n    }\n\n    var aEntrs = Object.entries(a);\n    var bEntrs = Object.entries(b);\n    if (nullNotEqualUndefined) {\n      aEntrs = aEntrs.filter(function (entr) {\n        return entr[1] !== undefined\n      });\n      bEntrs = bEntrs.filter(function (entr) {\n        return entr[1] !== undefined\n      });\n    } else {\n      aEntrs = aEntrs.filter(function (entr) {\n        return entr[1] != undefined\n      });\n      bEntrs = bEntrs.filter(function (entr) {\n        return entr[1] != undefined\n      });\n    }\n\n    if (aEntrs.length != bEntrs) {\n      return false;\n    }\n\n    return aEntrs.every(function (aEntr) {\n      var key = aEntr[0];\n      var aValue = aEntr[1];\n      var bValue = b[key];\n      return Object.isDepthEqual(aValue, bValue, nullNotEqualUndefined);\n    });\n\n\n  }\n\n  return a == b;\n};\n","\n/*\n 使用属性描述来定义属性的原因：\n - 为了不让 for...in 等类似的操作遍历这些定义在原型上的方法或属性，需要将属性设置为不可枚举的；\n - 为了解决给 Object.prototype 添加属性会在Vue中报错的问题，需要将属性设置为不可枚举的；\n */\n\n\nlet propertyDescriptors = {\n\n\n  //去重：开始\n\n\n  /*\n  getNoRepeats()\n  获取去除重复项目后的数组\n\n  ## 注意\n  - 该方法不改原数组，会返回一个新的数组；\n  - 该方法是通过 严格相等 `===` 运算符来判断 数组的元素是否重复的；\n  */\n  getNoRepeats: {\n    enumerable: false,\n    value: function () {\n\n      return this.filter(function (currentItem, index, arr) {\n        return index === arr.indexOf(currentItem);\n      });\n\n    }\n  },\n\n\n  /**\n   getNoRepeatsUseRepeatTest(isRepeated)\n   根据重复测试函数 `isRepeated` 来获取去除重复项目后的新数组\n\n   - @param isRepeated  : (item1,item2)=> boolean      重复油测试函数，传入被测试的2个项目，返回布尔值，表示这2个项目是否是重复的；\n   - @returns : Array  返回去除重复项目后的新数组\n\n   ## 注意\n   - 该方法不改原数组，会返回一个新的数组；\n   - 该方法是通过 isRepeated 函数来判断 数组的元素是否重复的；\n   */\n  getNoRepeatsUseRepeatTest: {\n    enumerable: false,\n    value: function (isRepeated) {\n\n      return this.filter(function (currentItem, index, arr) {\n        return index === arr.findIndex(function (findItem) {\n          return isRepeated(findItem, currentItem);\n        });\n      });\n\n    }\n  },\n\n\n  //去重：结束\n\n\n\n\n\n\n\n\n\n  //安全操作：开始\n\n  /*\n  JavaScript 数组中与遍历相关的方法都是非安全 和 非严谨的，当在遍历时增删原始数组的元素时，会引出问题；\n  详情请参考文章：https://www.jianshu.com/p/6dd641d0c13d\n\n  以下 安全操作 的方法便是用来解决这些问题的；\n   */\n\n\n\n\n  /**\n   * safelyOperateIndexs(indexList, operation, thisValue)\n   * 安全操作指定的索引\n   * @param indexList : [Index]   需要被操作的索引数组\n   * @param operation : (currentValue,currentIndex,currentArray)=>Void     执行的操作\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Item]   被操作的元素列表\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>Void\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   *\n   */\n  safelyOperateIndexs: {\n    enumerable: false,\n    value: function (indexList, operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n      let itemList = this.filter(function (currentValue, index) {\n        return indexList.includes(index);\n      });\n\n\n      itemList.forEach((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n      return itemList;\n\n    }\n\n  },\n\n\n  /**\n   * safelyOperateItems(itemList, operation, thisValue)\n   * 安全操作指定的元素\n   * @param itemList : [Item]   需要被操作的元素的数组\n   * @param operation : (currentValue,currentIndex,currentArray)=>Void     执行的操作\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Index]   被操作的元素的索引的列表；\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>Void\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   *\n   */\n  safelyOperateItems: {\n    enumerable: false,\n    value: function (itemList, operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n\n      let itemListCopy = [];\n      let indexList = itemList.map((item) => {\n        itemListCopy.push(item);\n        return this.indexOf(item);\n      });\n\n      itemListCopy.forEach((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n      return indexList;\n\n    }\n\n  },\n\n\n\n\n\n  /**\n   * safelyFilter(operation, thisValue)\n   * 安全地操作并过滤所有元素；与 forEach 和 filter 的区别是： safelyFilter 能保证会遍历数组中所有已存在的元素，不会受 operation 中的行为的影响；\n   * @param operation : (currentValue,currentIndex,currentArray)=>boolean | undefined     执行的操作， 该函数的返回值表示是否要过滤出该元素\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Item]  返回被 operation 过滤出的元素\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>boolean | undefined\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   * @returns boolean | undefined  表示是否要过滤出 currentValue ；\n   *\n   */\n  safelyFilter: {\n    enumerable: false,\n    value: function (operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n      let arrayCopy = this.slice();\n\n      return arrayCopy.filter((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n    }\n\n  },\n\n\n  //安全操作：结束\n\n\n\n\n\n\n\n\n\n\n\n  //移动元素：开始\n\n\n  /**\n   * move(fromIndex, toIndex, length = 1)\n   * 根据索引移动数组的元素\n   * @param fromIndex : number   被移动的元素的开始索引\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param length ? : number   可选，默认值：1 ； 被移动的元素的长度；\n   * @returns Array   被移动的元素的数组\n   */\n  move: {\n    enumerable: false,\n    value: function (fromIndex, toIndex, length = 1) {\n      let moveEleArr = this.splice(fromIndex, length);\n      this.splice(toIndex, 0, ...moveEleArr);\n\n      return moveEleArr;\n    }\n\n  },\n\n\n  /**\n   * moveTo(toIndex, ...fromIndexs)\n   * 根据索引批量移动数组的元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param fromIndex : number   被移动的元素的索引\n   * @returns Array<Item>   被移动的元素的数组\n   */\n  moveTo: {\n    enumerable: false,\n    value: function (toIndex, ...fromIndexs) {\n\n      let moveItems = this.deleteIndexs(...fromIndexs);\n      this.splice(toIndex, 0, ...moveItems);\n\n      return moveItems;\n    }\n\n  },\n\n\n  /**\n   * moveItemsTo(toIndex, ...items)\n   * 批量移动数组的指定元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param item : any   被移动的元素\n   * @returns Array<number>   被移动的元素的索引的数组\n   */\n  moveItemsTo: {\n    enumerable: false,\n    value: function (toIndex, ...items) {\n\n      let indexArr = this.deleteItems(...items);\n      this.splice(toIndex, 0, ...items);\n      return indexArr;\n    }\n\n  },\n\n\n  /**\n   * moveToUseTest(toIndex, needMoveTest)\n   * 根据测试函数批量移动数组的元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param needMoveTest : (currentValue,index,arr)=>boolean    测试数组元素是否需要被移动的函数，返回 boolean 值，表示当前元素 currentValue 是否需要被移动；\n   * @returns Array<Item>   被移动的元素的数组\n   */\n  moveToUseTest: {\n    enumerable: false,\n    value: function (toIndex, needMoveTest,thisValue) {\n\n      let moveItems = this.deleteUseTest(needMoveTest,thisValue);\n      this.splice(toIndex, 0, ...moveItems);\n\n      return moveItems;\n    }\n\n  },\n\n\n  //移动元素：结束\n\n\n\n\n\n\n\n\n\n\n  //插入元素：开始\n\n\n  /**\n   * insertItem(item, toIndex = 0, equalTest)\n   * 将指定元素插入到调用者数组中指定索引处，并且会删除调用者数组中与 item 相同的元素\n   * @param item : any    被插入的元素\n   * @param toIndex : number    元素被插入到的位置的索引\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array<Item>   被删除的元素\n   */\n  insertItem: {\n    enumerable: false,\n    value: function (item, toIndex = 0, equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n\n      let deleItems = this.filter((currentValue, currentIndex, arr) => {\n        return equalTest.call(this, currentValue, item);\n      });\n\n\n      this.deleteItems(...deleItems);\n      this.splice(toIndex, 0, item);\n\n      return deleItems;\n\n    }\n\n  },\n\n\n  /**\n   * insertItemList(itemList, toIndex = 0, equalTest)\n   * 将指定数组itemList中的元素插入到调用者数组的指定索引处，并且会删除调用者数组中 与 itemList中元素 相同的元素\n   * @param itemList : [any]    被插入的元素数组\n   * @param toIndex ? : number    可靠；默认值：0 ； 元素被插入到的位置的索引；\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array<Item>   被删除的元素\n   */\n  insertItemList: {\n    enumerable: false,\n    value: function (itemList, toIndex, equalTest) {\n      return itemList.reduceRight((deleItemList, item) => {\n        let deleItems = this.insertItem(item, toIndex, equalTest);\n        deleItemList.unshift(...deleItems);\n        return deleItemList;\n      }, []);\n    }\n\n  },\n\n  //插入元素：结束\n\n\n\n\n\n\n\n\n\n  //删除元素：开始\n\n  /**\n   * delete(start, end)\n   * 根据索引删除数组的元素\n   * @param start : number   被删除的元素的开始索引\n   * @param end ? : number   可选，默认值：start ； 被删除的元素的结束索引；\n   * @returns Array   被删除的元素的数组\n   */\n  delete: {\n    enumerable: false,\n    value: function (start, end) {\n      if (end == null) {\n        end = start;\n      }\n      let length = end + 1 - start;\n      return this.splice(start, length);\n    }\n\n  },\n\n\n  /**\n   * deleteIndexs(...indexs)\n   * 删除数组中指定的元素\n   * @param index : number   被删除的元素的索引\n   * @returns Array<Item>   被删除的元素的数组\n   */\n  deleteIndexs: {\n    enumerable: false,\n    value: function (...indexs) {\n\n      return this.safelyOperateIndexs(indexs, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n    }\n\n  },\n\n\n  /**\n   * deleteItems(...items)\n   * 删除数组中指定的元素\n   * @param item : any   被删除的元素\n   * @returns Array<number>   被删除的元素的索引数组\n   */\n  deleteItems: {\n    enumerable: false,\n    value: function (...items) {\n\n      return this.safelyOperateItems(items, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n    }\n\n  },\n\n\n  /**\n   * deleteUseTest(needDeleteTest)\n   * 根据测试函数批量删除数组的元素\n   * @param needDeleteTest : (currentValue,index,arr)=>boolean    测试数组元素是否需要被删除的函数，返回 boolean 值，表示当前元素 currentValue 是否需要被删除；\n   * @returns Array<Item>   被删除的元素的数组\n   */\n  deleteUseTest: {\n    enumerable: false,\n    value: function (needDeleteTest,thisValue) {\n\n      if (thisValue === undefined){\n        thisValue = this;\n      }\n\n      let itemList = this.filter((currentValue, currentIndex, arr) => {\n        return needDeleteTest.call(thisValue, currentValue, currentIndex, arr);\n      });\n\n\n      this.safelyOperateItems(itemList, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n\n      return itemList;\n    }\n\n  },\n\n\n  //删除元素：结束\n\n\n\n\n\n\n  //查找元素：开始\n\n  /**\n   * filterIndexs(filterTest,thisArg)\n   * 该方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素的索引。\n   * @param filterTest : (currentValue,index,arr)=>boolean    用来测试数组的每个元素的函数。调用时使用参数 (currentValue,index,arr)。返回true表示保留该元素（通过测试），false则不保留\n   * @param thisArg ? : any 可选。执行 callback 时的用于 this 的值。\n   * @returns Array<Index>   通过测试的元素的索引\n   */\n  filterIndexs: {\n    enumerable: false,\n    value: function (filterTest,thisArg) {\n\n      if  (thisArg == undefined){\n        thisArg = this;\n      }\n\n      return this.reduce(function(indexList, currentValue, index,arr){\n        if (filterTest.call(thisArg,currentValue,index,arr)) {\n          indexList.push(index);\n        }\n        return indexList;\n      },[]);\n\n    }\n\n  },\n\n\n  /**\n   * 属性; 返回最后一个元素\n   */\n  lastItem: {\n    enumerable: false,\n    get: function () {\n      return this[this.length - 1];\n    }\n  },\n  //查找元素：结束\n\n\n\n  //集合运算：开始\n\n  /**\n   * isContains(arr,equalTest)\n   * 判断当前数组 是否包含 数组arr 的所有元素；\n   * @param arr : Array   被测试的数组\n   * @param equalTest ? : (thisEle,arrEle)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素thisEle 和 元素arrEle  相同；\n   * @returns boolean\n   */\n  isContains: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return arr.every(function(item){\n\n        return this.some(function(thisItem){\n          return equalTest.call(this, thisItem, item);\n        },this);\n\n      }, this);\n\n    }\n  },\n\n\n\n  /**\n   * getIntersection(arr,equalTest)\n   * 获取指定数组的交集\n   * @param arr  : Array   数组\n   * @param equalTest ? : (thisEle,arrEle)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素thisEle 和 元素arrEle  相同；\n   * @returns Array   所有指定数组的交集\n   */\n  getIntersection: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest){\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return this.filter(function(thisEle){\n        return arr.some(function(arrEle){\n          return equalTest(thisEle,arrEle);\n        });\n      });\n\n    }\n  },\n\n\n\n  /**\n   * isIntersect(arr,equalTest)\n   * 判断当前数组与指定数组是否相交\n   * @param arr ? : Array   数组\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns boolean   当前数组与指定数组是否相交\n   */\n  isIntersect: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest){\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return this.some(function(thisEle){\n        return arr.some(function(arrEle){\n          return equalTest(thisEle,arrEle);\n        });\n      });\n\n    }\n  },\n\n\n\n\n\n  /**\n   * 获取当前数组在指定数组上的补集\n   * @param universalArr ? : Array   全集数组\n   * @param equalTest ? : (arrItem,thisItem)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array   当前数组在指定数组上的补集\n   */\n  getComplementOn: {\n    enumerable: false,\n    value: function (universalArr,equalTest) {\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n\n\n\n      return universalArr.filter(function(arrItem){\n\n        return !this.some(function(thisItem){\n          return equalTest.call(this,arrItem,thisItem);\n        },this);\n\n      },this);\n    }\n  },\n\n\n\n\n  /**\n   * 获取符合 包含 和 排除 项 的所有元素\n   * getIncludeAndExclude(options,equalTest)\n   * @param options : {include ?: Array,exclude ?: Array}    必须；配置 包含 和 排除 数组 的 选项；\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array   返回符合 options 中设置的 包含 和 排除 项 的所有元素\n   */\n  getIncludeAndExclude: {\n    enumerable: false,\n    value: function (options,equalTest) {\n      var {include,exclude} = options;\n      var valids = this;\n      if (include){\n        valids = valids.getIntersection(include,equalTest);\n      }\n\n      if (exclude){\n        valids = exclude.getComplementOn(valids,equalTest);\n      }\n\n      return valids;\n    }\n  },\n\n\n  //集合运算：结束\n\n\n  //处理索引：开始\n\n  /**\n   * 获取指定索引的反相索引，即从后往前的索引，从0开始\n   * @param index : number   正向的索引\n   */\n  reverseIndexForIndex: {\n    enumerable: false,\n    value: function (index) {\n      return this.length - index - 1;\n    }\n  },\n\n  //处理索引：结束\n\n\n\n\n\n\n\n\n\n  //队列：开始\n\n  /**\n   * queuePush(item1, item2, ..., itemX)\n   * 从队列尾部推入所有的item；此操作会从数组开始删除相应的数目的元素\n   * @param item : any    推入队列的元素\n   * @returns Array    返回包含所有删除元素的数组\n   */\n  queuePush: {\n    enumerable: false,\n    value: function (...items) {\n      this.push(...items);\n      return this.splice(0,items.length);\n    }\n  },\n\n\n\n  /**\n   * queuePop()\n   * 从队列尾部推出（删除）一个item；此操作会将数组剩下的元素往数组尾部移动一位；\n   * @returns any    返回被删除的元素\n   */\n  queuePop: {\n    enumerable: false,\n    value: function () {\n      this.unshift(undefined);\n      return this.pop();\n    }\n  },\n\n\n\n\n  /**\n   * queueUnshift(item1, item2, ..., itemX)\n   * 从队列头部推入所有的item；此操作会从数组尾部删除相应的数目的元素\n   * @param item : any    推入队列的元素\n   * @returns Array    返回包含所有删除元素的数组\n   */\n  queueUnshift: {\n    enumerable: false,\n    value: function (...items) {\n      this.unshift(...items);\n      let len = items.length;\n      return this.splice(-len,len);\n    }\n  },\n\n\n\n\n  /**\n   * queueShift()\n   * 从队列头部推出（删除）一个item；此操作会将数组剩下的元素往数组头部移动一位；\n   * @returns any    返回被删除的元素\n   */\n  queueShift: {\n    enumerable: false,\n    value: function () {\n      this.push(undefined);\n      return this.shift();\n    }\n  },\n\n  //队列：结果\n\n\n\n\n};\n\n\nObject.defineProperties(Array.prototype, propertyDescriptors);\n\n\n\n\n\n\n//集合运算：开始\n\n/**\n * 获取所有指定数组的交集\n * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n * @param array ? : Array   数组\n * @returns Array   所有指定数组的交集\n */\nArray.intersectionOf = function intersectionOf(equalTest,...arrays) {\n\n  if (typeof equalTest != \"function\"){\n\n    if (Array.isArray(equalTest)) {\n      arrays.unshift(equalTest);\n    }\n\n    equalTest = function (a, b) {\n      return a === b;\n    };\n\n  }\n\n\n\n  arrays.sort(function(arr1,arr2){\n    return arr1.length - arr2.length ;\n  });\n\n  let leastArr = arrays.shift();\n\n\n\n  return leastArr.filter(function(item){\n\n    return arrays.every(function(arr){\n\n      return arr.some(function(arrItem){\n        return equalTest(item,arrItem);\n      });\n\n    });\n\n  });\n}\n\n\n\n\n\n\n/**\n * 判断所有指定数组是否有交集\n * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n * @param array ? : Array   数组\n * @returns boolean   所有指定数组是否有交集\n */\nArray.isIntersect = function isIntersect(equalTest,...arrays) {\n\n  if (typeof equalTest != \"function\"){\n\n    if (Array.isArray(equalTest)) {\n      arrays.unshift(equalTest);\n    }\n\n    equalTest = function (a, b) {\n      return a === b;\n    };\n\n  }\n\n\n\n  arrays.sort(function(arr1,arr2){\n    return arr1.length - arr2.length ;\n  });\n\n  let leastArr = arrays.shift();\n\n\n\n\n  return leastArr.some(function(item){\n\n    return arrays.every(function(arr){\n\n      return arr.some(function(arrItem){\n        return equalTest(item,arrItem);\n      });\n\n    });\n\n  });\n};\n\n\n\n\n\n//集合运算：结束\n\n\n\n\n\n\n\n\n\n\n/**\n * isArrayLike(target)\n * 判断 target 是否为 类数组对象\n * @param target : any    目标\n * @returns boolean\n */\nArray.isArrayLike = function isArrayLike(target) {\n  let length = target && target.length;\n  return Number.isInteger(target.length) && length >= 0;\n};\n","\n//对 JSON 扩展的属性和方法都写在 extendJSON 里面\nvar extendJSON = {\n  extended:true,  //用于标识 JSON 是否这被对象 extendJSON 扩展过；\n\n\n  /**\n   * 安全地解析字符串，不会抛出错误，返回一个解析结果的信息对象\n   * @param text : string   必需， 一个有效的 JSON 字符串。\n   * @param reviver ?: function   可选，一个转换结果的函数， 将为对象的每个成员调用此函数。\n   * @returns {parsed: boolean, result: string | JSONObject }   解析的结果； parsed ：表示是否成功解析； result ： 最终解析的结果，如果成功解析，则该值为解析后的JSON对象，如果未成功解析，则该值为原字符串 text\n   */\n  safelyParse: function (text, reviver) {\n    let parseInfo = {\n      parsed: true,\n      result: text\n    };\n\n    try {\n      parseInfo.result = JSON.parse(text, reviver);\n    } catch (e) {\n      parseInfo.parsed = false;\n    }\n\n    return parseInfo;\n  },\n\n\n  /**\n   * 将目标深度序列化成JSON字符串\n   * @param target : any    将要序列化成 一个JSON 字符串的值。\n   * @param replacer ? : (key,vlaue)=>vlaue |  Array    如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。\n   * @param space ?  指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。\n   * @returns string   一个表示给定值的JSON字符串。\n   *\n   *\n   *\n   * 注意：\n   * 该方法会把 target 的中的所有对象属性单独序列化成 JSON 字符串\n   */\n  depthStringify:function(target, replacer , space){\n    let newTarget = Object.keys(target).reduce((total,key)=>{\n      let prop = target[key];\n      if (typeof prop == \"object\"){\n        prop = this.depthStringify(prop,replacer , space);\n      }\n      total[key] = prop;\n      return total;\n    },{});\n\n    return JSON.stringify(newTarget,replacer , space)\n  },\n\n\n  /**\n   * 深度解析； depthStringify 的逆运算\n   * @param text\n   * @param reviver\n   * @returns any\n   */\n  depthParse:function(text, reviver){\n    let result = JSON.correctParse(text, reviver);\n    if (typeof result == \"object\"){\n      Object.keys(result).forEach((key)=> {\n        let prop = result[key];\n        prop = this.depthParse(prop,reviver);\n        result[key] = prop;\n      });\n    }\n\n    return result;\n  },\n\n\n  /**\n   * 判断 text 是否是有效的JSON字符串\n   * @returns boolean\n   */\n  isJSONString:function (text) {\n\n    try {\n      var parsed = JSON.parse(text);\n      var isJSON = parsed !== text;\n    } catch (e) {\n      isJSON = false;\n    }\n\n    return isJSON;\n\n  },\n\n\n  /**\n   * correctParse(text,reviver)\n   * 正确地解析，即：如果 text 是有效的 JSON 字符串，则解析它并返回解析后的结果，否则，返回原来的text\n   * @param text :  string   被解析的字符串\n   * @returns any\n   */\n  correctParse:function (text,reviver) {\n\n    try {\n      var parsed = JSON.parse(text, reviver);\n      var isJSON = parsed !== text;\n    } catch (e) {\n      isJSON = false;\n    }\n\n    if (!isJSON){\n      parsed = text;\n    }\n\n    return parsed;\n\n  }\n\n\n\n\n\n};\n\n\n\n\n\n\n\nvar oriJSON = globalThis.JSON ;\n\n/*\n* 翻用这种方式的原因是：\n* 为了防止别人重置 JSON 对象时忽略了本文件扩展的方法；\n* */\nObject.defineProperty(globalThis, \"JSON\", {\n  get: function () {\n    return globalThis._JSON;\n  },\n\n  set: function (newValue) {\n    if (!newValue.extended) {\n      Object.assign(newValue,extendJSON);\n    }\n    globalThis._JSON = newValue;\n  }\n});\n\nglobalThis.JSON = oriJSON ;\n","\n\nObject.defineProperties(String.prototype,{\n\n  /**\n   * 是否是有效的 JSON 字符串\n   */\n  isJSONString:{\n    get: function () {\n      return JSON.isJSONString(this);\n    }\n  },\n\n\n  /**\n   * 是否不包任何非空字符\n   */\n  noChars:{\n    get: function () {\n      return !(/\\S+/.test(this));\n    }\n  },\n\n\n  /**\n   * 首字母大写\n   */\n  capFirstLetter:{\n    get:function () {\n      return this.replace(/(^\\W*)(\\w)/,function (match,p1,p2) {\n        return p1 + p2.toUpperCase();\n      });\n    }\n  },\n\n\n\n  /**\n   * 把字符串转换成分隔线的格式\n   * @param separator ? : string   可选，默认值：\"-\" ；   分隔线\n   * @property caseType ? : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常，不做改变；\n   * @returns string\n   */\n  toSeparatorLineFormat:{\n    value:function (separator,caseType) {\n\n      if (separator == undefined)  {\n        separator = \"-\" ;\n      }\n\n      if (caseType == undefined) {\n        caseType = \"N\" ;\n      }\n\n      var lowerCase = caseType == \"L\" ;\n\n      var targetStr = this.replace(/[A-Z]+/g,function (match,offset,oriStr) {\n        var matchStr = lowerCase ? match.toLowerCase() : match ;\n        return separator + matchStr ;\n      });\n\n      var errorSeparatorRexStr = \"(^\\\\s*)\"+ separator + \"+\" ;\n      var errorSeparatorRex = new RegExp(errorSeparatorRexStr);\n      targetStr = targetStr.replace(errorSeparatorRex,\"$1\");  //如果首字母是大写，执行replace时会多一个_，这里需要去掉\n\n      if (caseType == \"U\"){\n        targetStr = targetStr.capFirstLetter\n      }\n\n      return targetStr;\n    }\n  },\n\n\n\n  /**\n   * 把字符串从分隔线格式转换成驼峰格式\n   * @param separator ? : string   可选，默认值：\"-\" ；   分隔线\n   * @returns string\n   */\n  toCamelFormat:{\n    value:function (separator) {\n\n      if (separator == undefined)  {\n        separator = \"-\" ;\n      }\n\n      var separatorRexStr = separator + \"+([A-Za-z]?)\" ;\n      var separatorRex = new RegExp(separatorRexStr,\"g\");\n\n      return this.replace(separatorRex,function (match,p1) {\n        return p1.toUpperCase() ;\n      });\n    }\n  },\n\n\n\n\n  /**\n   * 获取所有指定格式的字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [string]  所有指定格式的字符串数组\n   */\n  getAllStrForFormats:{\n    value:function (formats) {\n      var _this = this;\n\n      if (!Array.isArray(formats)) {\n        formats = [formats];\n      }\n\n      var allStrs = formats.reduce(function(total,format) {\n        var separator = format.separator ;\n        var caseType = format.caseType || \"N\" ;\n\n\n        var targetStr = _this;\n\n        if (separator != undefined) {\n          targetStr = _this.toSeparatorLineFormat(separator,caseType);\n        }else if (caseType == \"U\") {\n          targetStr = _this.toUpperCase();\n        }else if (caseType == \"L\") {\n          targetStr = _this.toLowerCase();\n        }\n\n        total.push(targetStr);\n\n        return total;\n\n      },[]);\n\n      return allStrs;\n    }\n  },\n\n\n\n\n  //URL相关：开始\n\n  /**\n   * 是否是URL\n   */\n  isURL:{\n    get: function () {\n      return /^\\w+:\\/\\/\\S+/.test(this);\n    }\n  },\n\n\n  //URL相关：结束\n\n\n\n\n});\n","/**\n * 接口1:\n * distanceSort(target, num1,num2 ,...)\n * 根据各个 num 在数轴上距 target 远近来排序\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * distanceSort(target, nums)\n * 根据 nums 各个数在数轴上距 target 远近来排序\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.distanceSort = function distanceSort(target, ...nums) {\n  let numList = nums;\n\n  let firstNum = nums[0];\n  if ( (nums.length == 1) && Array.isArray(firstNum)) {\n    numList = firstNum.slice();\n  }\n\n  let disSort = numList.sort(function (a,b) {\n    return Math.abs(a - target) - Math.abs(b - target) ;\n  });\n\n  return disSort;\n};\n\n\n\n\n\n\n/**\n * 接口1:\n * nearest(target, num1,num2 ,...)\n * 返回距 target 最近的数\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * nearest(target, nums)\n * 返回距 target 最近的数\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.nearest = function nearest(target, ...nums) {\n  let disSort = Math.distanceSort(target,...nums);\n  return disSort[0];\n};\n\n\n\n\n/**\n * 接口1:\n * farthest(target, num1,num2 ,...)\n * 返回距 target 最远的数\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * farthest(target, nums)\n * 返回距 target 最远的数\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.farthest = function farthest(target, ...nums) {\n  let disSort = Math.distanceSort(target,...nums);\n  let lastIndex = disSort.length - 1;\n  return disSort[lastIndex];\n};\n","\nlet propertyDescriptors = {\n\n\n\n  /**\n   * 接口1:\n   * distanceSort(num1,num2 ,...)\n   * 根据各个 num 在数轴上距 自己 远近来排序\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * distanceSort(nums)\n   * 根据 nums 各个数在数轴上距 自己 远近来排序\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  distanceSort:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.distanceSort(this,...nums);\n    }\n  },\n\n\n\n  /**\n   * 接口1:\n   * nearest(num1,num2 ,...)\n   * 返回距 自己 最近的数\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * nearest(nums)\n   * 返回距 自己 最近的数\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  nearest:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.nearest(this,...nums);\n    }\n  },\n\n\n\n\n  /**\n   * 接口1:\n   * farthest(num1,num2 ,...)\n   * 返回距 自己 最远的数\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * farthest(nums)\n   * 返回距 自己 最远的数\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  farthest:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.farthest(this,...nums);\n    }\n  },\n\n\n\n};\n\n\n\n\n\n\nObject.defineProperties(Number.prototype,propertyDescriptors);\n\n\n\n\n\n\n\n//兼容：开始\n\n\nif (!Number.isInteger) {\n  Number.isInteger = Number.isInteger || function(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n  };\n}\n\n\n//兼容：结束\n","/**\n *\n * 接口1\n * getDaysOfMonth(timestamp)\n * 获取指定时间所在月份的总天数\n * @param timestamp : number  代表自1970年1月1日00:00:00 (世界标准时间) 起经过的毫秒数。\n * @returns number   返回指定月份的天数\n *\n *\n *\n * 接口2\n * getDaysOfMonth(dateString)\n * 获取指定时间所在月份的总天数\n * @param dateString : string  日期的字符串值。该字符串应该能被 Date.parse() 方法识别\n * @returns number   返回指定月份的天数\n *\n *\n *\n * 接口3\n * getDaysOfMonth(date)\n * 获取指定时间实例所在月份的总天数\n * @param date : Date  Date 实例。\n * @returns number   返回指定月份的天数\n *\n *\n * 接口4\n * getDaysOfMonth(year, month)\n * 获取指定月份的总开数\n * @param year : number  年份\n * @param month : number  月份\n * @returns number   返回指定月份的天数\n *\n *\n * 接口5\n * getDaysOfMonth()\n * 获取当前时间实例所在月份的总天数\n * @returns number   返回当前时间所在月份的总天数\n */\nDate.getDayNumberOfMonth = function getDayNumberOfMonth(year, month) {\n\n  switch (arguments.length) {\n    case 2:{\n      var date = new Date(year,month);\n      break;\n    }\n\n    case 1:{\n      var initValue = year;\n      if (year instanceof Date){\n        initValue = year.getTime();\n      }\n      date = new Date(initValue);\n      break;\n    }\n\n    default:{\n      date = new Date();\n    }\n\n  }\n\n\n  date.setMonthOffset(1);\n  date.setDate(0);\n  var dayNum = date.getDate();\n  return dayNum;\n};\n\n\n/**\n * 获取该日期所在月份的天数\n */\nDate.prototype.getDayNumber = function getDayNumber() {\n  return Date.getDayNumberOfMonth(this);\n};\n\n\n\n\n\n/**\n * setYearOffset(offset)\n * 设置年份偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的年份\n */\nDate.prototype.setYearOffset = function setYearOffset(offset) {\n  if (offset) {\n    var num = this.getFullYear();\n    this.setFullYear(num+offset);\n  }\n\n  return this.getFullYear();\n};\n\n\n\n/**\n * setMonthOffset(offset)\n * 设置月份偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的月份\n */\nDate.prototype.setMonthOffset = function setMonthOffset(offset) {\n  if (offset) {\n    var num = this.getMonth();\n    this.setMonth(num+offset);\n  }\n\n  return this.getMonth();\n};\n\n\n\n\n\n/**\n * setDateOffset(offset)\n * 设置天偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的天\n */\nDate.prototype.setDateOffset = function setDateOffset(offset) {\n  if (offset) {\n    var num = this.getDate();\n    this.setDate(num+offset);\n  }\n\n  return this.getDate();\n};\n\n\n\n/**\n * setHourOffset(offset)\n * 设置小时偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns date : number   偏移后的小时\n */\nDate.prototype.setHourOffset = function setHourOffset(offset) {\n  if (offset) {\n    var num = this.getHours();\n    this.setHours(num+offset);\n  }\n\n  return this.getHours();\n};\n\n\n\n\n\n\n/**\n * setMinuteOffset(offset)\n * 设置分钟偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的分钟\n */\nDate.prototype.setMinuteOffset = function setMinuteOffset(offset) {\n  if (offset) {\n    var num = this.getMinutes();\n    this.setMinutes(num+offset);\n  }\n\n  return this.getMinutes();\n};\n\n\n\n\n\n\n\n/**\n * setSecondOffset(offset)\n * 设置秒数偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的秒数\n */\nDate.prototype.setSecondOffset = function setSecondOffset(offset) {\n  if (offset) {\n    var num = this.getSeconds();\n    this.setMinutes(num+offset);\n  }\n\n  return this.getSeconds();\n};\n\n\n\n\n\n/**\n * setMillisecondOffset(offset)\n * 设置亳秒数偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的亳秒数\n */\nDate.prototype.setMillisecondOffset = function setMillisecondOffset(offset) {\n  if (offset) {\n    var num = this.getMilliseconds();\n    this.setMilliseconds(num+offset);\n  }\n\n  return this.getMilliseconds();\n};\n\n\n\n\n\n\n//获取从开始到结束的步长为step的所有时间\n\n/*Date.getAllDate  = function(start,step,end) {\n\n  switch (step) {\n    case\n\n  }\n\n\n};*/\n","//ByURL：开始\n\n/**\n * 该类是用于在不支持 URL 类型的环境下替代 URL 的；但该类的提供的功能和接口远丰富于 URL ，但并不完全包含于 URL ，所以，完全替换 URL\n */\nexport class ByURL {\n\n  deleUrlUtilsMap = {\n    url:[\"origin\",\"protocol\",\"host\",\"hostname\",\"port\",\"pathname\",\"pathList\",\"absPath\"],\n    origin:[\"protocol\",\"host\",\"hostname\",\"port\"],\n    host:[\"hostname\",\"port\"],\n    pathname:[\"pathList\",\"absPath\"],\n    pathList:[\"pathname\",\"absPath\"],\n    search:[\"searchParams\",\"params\"],\n    searchParams:[\"search\",\"params\"],\n    hash:[\"hashSearch\",\"hashParams\",\"hashUrlUtils\",\"params\"],\n    hashSearch:[\"hashParams\",\"params\"],\n    hashParams:[\"hashSearch\",\"params\"],\n    hashUrlUtils:[\"hash\",\"hashSearch\",\"hashParams\",\"params\"],\n    addSearchParams:[\"addSearch\"],\n    addHashParams:[\"addHashSearch\"]\n  };\n\n  /**\n   * paramsPropParse  : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，否则，原样输出；\n   */\n  paramsPropParse;\n\n  /**\n   * paramsPropStringify : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  paramsPropStringify;\n\n  /**\n   *\n   * @param initUrl : UrlUtils | string    必选；\n   * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n   * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  constructor(initUrl,paramsPropParse,paramsPropStringify){\n    this.paramsPropParse = paramsPropParse;\n    this.paramsPropStringify = paramsPropStringify;\n    this.initUrl = initUrl;\n  }\n\n  /**\n   * urlUtils 包含解析后的所有url组件的对象\n   */\n  set urlUtils(newValue){\n      this._urlUtils = newValue;\n  }\n\n  get urlUtils(){\n    if (!this._urlUtils) {\n      this._urlUtils = {};\n    }\n    return this._urlUtils;\n  }\n\n\n  /**\n   * 原始输入的 url\n   * @param newValue\n   */\n  set initUrl(newValue){\n    this._initUrl = newValue;\n    if (newValue){\n      var urlUtils = newValue;\n      if (typeof newValue != \"object\"){\n        urlUtils = parseUrl(newValue,this.paramsPropParse,this.paramsPropStringify);\n      }\n      this.urlUtils = urlUtils;\n    }\n  }\n\n  get initUrl(){\n    return this._initUrl;\n  }\n\n\n\n  get href(){\n    return stringifyUrl(this.urlUtils,this.paramsPropStringify,this.paramsPropParse);\n  }\n  set href(newValue){\n    this.initUrl = newValue;\n  }\n\n\n  get url(){\n    return this.urlUtils.url;\n  }\n  set url(newValue){\n    this._deleUrlUtilsFor(\"url\");\n    this.urlUtils.url = newValue;\n  }\n\n\n\n  get origin(){\n    return this.urlUtils.origin;\n  }\n  set origin(newValue){\n    this._deleUrlUtilsFor(\"origin\");\n    this.urlUtils.origin = origin;\n  }\n\n\n  get protocol(){\n    return this.urlUtils.protocol;\n  }\n  set protocol(newValue){\n    this._deleUrlUtilsFor(\"protocol\");\n    this.urlUtils.protocol = newValue;\n  }\n\n\n\n  get host(){\n    return this.urlUtils.host;\n  }\n  set host(newValue){\n    this._deleUrlUtilsFor(\"host\");\n    this.urlUtils.host = newValue;\n  }\n\n\n\n  get hostname(){\n    return this.urlUtils.hostname;\n  }\n  set hostname(newValue){\n    this._deleUrlUtilsFor(\"hostname\");\n    this.urlUtils.hostname = newValue;\n  }\n\n\n\n  get port(){\n    return this.urlUtils.port;\n  }\n  set port(newValue){\n    this._deleUrlUtilsFor(\"port\");\n    this.urlUtils.port = newValue;\n  }\n\n\n  get pathname(){\n    return this.urlUtils.pathname;\n  }\n  set pathname(newValue){\n    this._deleUrlUtilsFor(\"pathname\");\n    this.urlUtils.pathname = newValue;\n  }\n\n\n\n  get pathList(){\n    return this.urlUtils.pathList;\n  }\n  set pathList(newValue){\n    this._deleUrlUtilsFor(\"pathList\");\n    this.urlUtils.pathList = newValue;\n  }\n\n\n  get absPath(){\n    return this.urlUtils.absPath;\n  }\n\n\n\n  get search(){\n    return this.urlUtils.search;\n  }\n  set search(newValue){\n    this._deleUrlUtilsFor(\"search\");\n    this.urlUtils.search = newValue;\n  }\n\n\n\n  get searchParams(){\n    return this.urlUtils.search;\n  }\n  set searchParams(newValue){\n    this._deleUrlUtilsFor(\"searchParams\");\n    this.urlUtils.searchParams = newValue;\n  }\n\n\n\n  get hash(){\n    return this.urlUtils.hash;\n  }\n  set hash(newValue){\n    this._deleUrlUtilsFor(\"hash\");\n    this.urlUtils.hash = newValue;\n  }\n\n\n\n  get hashSearch(){\n    return this.urlUtils.hashSearch;\n  }\n  set hashSearch(newValue){\n    this._deleUrlUtilsFor(\"hashSearch\");\n    this.urlUtils.hashSearch = newValue;\n  }\n\n\n\n  get hashParams(){\n    return this.urlUtils.hashParams;\n  }\n  set hashParams(newValue){\n    this._deleUrlUtilsFor(\"hashParams\");\n    this.urlUtils.hashParams = newValue;\n  }\n\n\n  get hashUrlUtils(){\n    return this.urlUtils.hashUrlUtils;\n  }\n  set hashUrlUtils(newValue){\n    this._deleUrlUtilsFor(\"hashUrlUtils\");\n    this.urlUtils.hashUrlUtils = newValue;\n  }\n\n\n  get params(){\n    return this.urlUtils.params;\n  }\n\n\n  /**\n   * 清除与 util 相关的子 util\n   * @param util : string\n   */\n  _deleUrlUtilsFor(util){\n    let deleUtils = this.deleUrlUtilsMap[util];\n    if (deleUtils){\n      deleUtils.forEach((deleKey)=>{\n        this.urlUtils[deleKey] = undefined;\n      });\n    }\n  }\n\n\n  /**\n   * 接口1:\n   * addSearchParams(key,value)\n   * 给查询参数添加新的成员，并返回添加后的查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * addSearchParams(params)\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addSearchParams()\n   * 获取添加的查询参数\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   */\n  addSearchParams(key,value){\n\n    if (key){\n\n      let addSearchParams = this.urlUtils.addSearchParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addSearchParams,key);\n      } else {\n        addSearchParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addSearchParams\");\n      this.urlUtils.addSearchParams = addSearchParams;\n\n    }\n\n    return this.urlUtils.addSearchParams;\n  }\n\n\n\n\n\n\n\n  /**\n   * 接口1:\n   * addHashParams(key,value)\n   * 给hash查询参数添加新的成员，并返回添加后的hash查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * addHashParams(params)\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addHashParams()\n   * 获取添加的hash查询参数\n   * @returns addSearchParams : Object    返回添加后的hash查询参数对象\n   */\n  addHashParams(key,value){\n\n    if  (key){\n\n      let addHashParams = this.urlUtils.addHashParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addHashParams,key);\n      } else {\n        addHashParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addHashParams\");\n      this.urlUtils.addHashParams = addHashParams;\n    }\n\n    return this.urlUtils.addHashParams;\n\n  }\n\n\n\n\n\n}\n\n\n\n//ByURL：结束\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：开始\n\n\n//不依赖 URL 和 URLSearchParams 的解析：开始\n\n\n/**\n *默认的 paramsPropParse ; 用JSON解析参数的属性\n */\nfunction _paramsPropJSONParse(value) {\n  return JSON.correctParse(value);\n}\n\n\n\n/**\n *默认的 paramsPropStringify ；用JSON序列化参数的属性\n */\nfunction _paramsPropJSONStringify(value,key,params) {\n    if (typeof value == \"object\"){\n      value = JSON.stringify(value);\n    }\n    return value;\n}\n\n\n\n\n/**\n * 把url字符串解析成 UrlUtils 对象； UrlUtils 对象是包含所有 url 组件的对象；\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n *\n * @param urlStr : string   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @returns urlUtils : UrlUtils\n *\n 返回的对象 UrlUtils 对象包含以下属性\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n searchParams:Object,  //查询参数search的对象形式\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n hashSearch:string, // 哈唏hash中的查询字符串\n hashParams:Object,   //哈唏hash中的参数\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n params:Object,    //url中所有的参数，包括 searchParams 和 hashParams\n *\n */\nexport function parseUrl(urlStr,paramsPropParse,paramsPropStringify){\n  var protocolRegExp;\n  protocolRegExp = /^\\w+(?=:\\/\\/)/;\n  var hostRegExp = /([^./:\\s]+(?:\\.[^./:\\s]+)+)(?::(\\d+))?|([^./:\\s]+)(?::(\\d+))/;\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n  var href = urlStr.trim();\n  var {url,search,hash} = splitURLByQueryString(href);\n\n\n  //解析协间 protocol\n  if (url){\n    var hostUrl = url;\n    var protoList = url.split(\"://\");\n    if (protoList.length > 1){\n      var protocol = protoList[0];\n      hostUrl = protoList[1];\n    }\n  }\n\n\n\n\n\n  //解析域名和路径 host hostname port pathname  pathList absPath\n  if (hostUrl){\n    var hostList = hostUrl.split(\"/\");\n\n    if (hostList.length > 1){\n\n      var hostItem0 = hostList[0];\n\n      if (/^\\.+$/.test(hostItem0)){ //以 .开关：相对路径\n        var pathname = hostUrl;\n        var pathList = hostList.slice(1);\n        var absPath = false;     //绝对路径的标识设置为假\n      }else if (hostItem0) {\n        var hostRegRes = hostItem0.match(hostRegExp);\n        if (hostRegRes){  //判断通过/分隔后的第一个元素是否符合 host 的格式\n          var host = hostRegRes[0];\n          var hostname = hostRegRes[1] || hostRegRes[3];\n          var port = hostRegRes[2] || hostRegRes[4];\n          pathList = hostList.slice(1);\n          pathname = \"/\" + pathList.join(\"/\");\n          absPath = true;\n        }else {\n          absPath = false;\n          pathList = hostList;\n          pathname = hostUrl;\n        }\n\n      }else { //如果通过/分隔后的第一个元素为空字符串，则说明 hostUrl 是个绝对路径\n        pathList =  hostList.slice(1);\n        pathname = hostUrl;\n        absPath = true;\n      }\n\n\n\n    }else { //如果 hostUrl 中不包含 / ，则说明 hostUrl 是单个域名\n      hostRegRes = hostUrl.match(hostRegExp);\n      if (hostRegRes) {\n        host = hostUrl;\n        hostname = hostRegRes[1];\n        port = hostRegRes[2];\n        absPath = true;\n      }else {\n        pathname = hostUrl;\n        pathList = hostList;\n        absPath = false;\n      }\n\n    }\n\n  }\n\n\n\n\n  //构造 origin\n  if (host) {\n    if (protocol){\n      var origin = protocol + \"://\" + host;\n    } else {\n      origin = host\n    }\n\n  }\n\n\n\n  //解析查询字符串 search  params\n  if (search) {\n    var searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  //解析哈唏 hash hashParams\n  if (hash){\n    var hashParamStr = hash.replace(/^#+/,\"\");\n    var hashUrlUtils = parseUrl(hashParamStr,paramsPropParse,paramsPropStringify);\n    var hashSearch = hashUrlUtils.search;\n    var hashParams = hashUrlUtils.params;\n  }\n\n\n  //构造 params 对象\n  if  (searchParams || hashParams){\n    var params = {};\n    if (searchParams){\n      Object.assign(params,searchParams);\n    }\n\n    if (hashParams){\n      Object.assign(params,hashParams);\n    }\n  }\n\n\n\n\n  //构造 UrlUtils\n  var urlUtils = {\n    href:href,    //包含完整 URL 的 DOMString。\n    url:url,   //不包含search和hase 的url\n    origin:origin,  //返回一个包含协议名、域名和端口号的 DOMString。\n    protocol:protocol,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n    host:host,  //包含 URL 域名，':'，和端口号的 DOMString。\n    hostname:hostname,  //包含 URL 域名的 DOMString。\n    port:port,    //包含 URL 端口号的 DOMString。\n    pathname:pathname,  //URL 的路径的字符串。\n    pathList:pathList,  //url的路径名列表\n    absPath:absPath, //pathname 是否是经对路径\n    search:search,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n    searchParams:searchParams,  //查询参数search的对象形式\n    hash:hash, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n    hashSearch:hashSearch, // 哈唏hash中的查询字符串\n    hashParams:hashParams,   //哈唏hash中的参数\n    hashUrlUtils:hashUrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n    params:params,    //url中所有的参数，包括 searchParams 和 hashParams\n  };\n\n\n  //精简 UrlUtils 对象，只保留有属性值的属性；\n  var simpUrlUtils = Object.keys(urlUtils).reduce(function (total, key) {\n    var value = urlUtils[key];\n    if (value != null){\n      total[key] = value;\n    }\n    return total;\n  },{});\n\n\n  return simpUrlUtils;\n}\n\n\n\n\n\n\n/**\n * 把  UrlUtils 对象序列化成 url 字符串； UrlUtils 对象是包含所有 url 组件的对象；\n *\n * @param urlUtils : UrlUtils   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @returns urlStr : string\n *\n *\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n * - 对于 urlUtils 中 顶层与 hash 相关的属性 比 urlUtils 属性 hashUrlUtils 中相应的属性优先级更高；\n * - 对于 urlUtils 中有冲突的url组件属性，则以组件粒度较细者优先；如：如果 urlUtils 中同时设置了 href 和 host 属性，则 host 属性值会取代 href 属性中的 host 部分；\n *\n *\n *\n *\n * urlUtils 对象可配置的属性包括 parseUrl 方法能解析出的所有属性，此还，还包括侯个新的属性：addSearch、addSearchParams、addHashSearch、addHashParams ；\n * urlUtils 中可配置的属性如下：\n addSearch: string   //另外追加的 search 字符串，该属性优先级低于addSearchParams\n addSearchParams: Object  // 另外追加的 search 对象，该属性优先级高于 addSearch\n addHashSearch: string   //另外追加的 hashSearch 字符串，该属性优先级低于 addHashParams\n addHashParams: Object  // 另外追加的 hashSearch 对象，该属性优先级高于 addHashSearch\n\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。该属性的优先级低于 searchParams\n searchParams:Object,  //查询参数search的对象形式；如果没有设置该属性，则默认取 在 params 中 但不在 hashParams 中的所有属性组成的对象来代替； 该属性的优先级高于 search\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。该属性会 覆盖 hashUrlUtils.href 属性；\n hashSearch:string, // 哈唏hash中的查询字符串； 该属性的优先级低于 hashParams\n hashParams:Object,   //哈唏hash中的参数；如果没有设置该属性 且 设置了 searchParams，则默认取 在 params 中 但不在 searchParams 中的所有属性组成的对象来代替； 该属性的优先级高于 hashSearch； hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils； 顶层中的 hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n params:Object,    //url的参数；\n *\n *\n */\nexport function stringifyUrl(urlUtils,paramsPropStringify,paramsPropParse){\n  var urlStr = \"\";\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  var href = urlUtils.href || urlUtils.url || urlUtils.origin;\n  if (href){\n    var hrefUrlUtils = parseUrl(href,paramsPropParse,paramsPropStringify);\n    urlUtils = Object.assign(hrefUrlUtils,urlUtils)\n  }\n\n\n  //拼接协意 protocol\n  var protocol = urlUtils.protocol;\n  if (protocol){\n    urlStr = protocol + \"://\";\n  }\n\n  //拼接域名 host\n  var host = urlUtils.host;\n  var hostname = urlUtils.hostname;\n  if  (hostname){\n    host = hostname;\n    var port = urlUtils.port;\n    if (port){\n      host += \":\" + port;\n    }\n  }\n\n\n  if (host){\n    urlStr += host ;\n  }\n\n\n\n  //拼接路径 pathname\n  var pathname = urlUtils.pathname;\n  var pathList = urlUtils.pathList;\n  var absPath = urlUtils.absPath;\n  if (!pathname && pathList) {\n    pathname = \"/\" + pathList.join(\"/\");\n  }\n  if (pathname){\n    pathname = pathname.trim();\n    if (urlStr || absPath === true) {\n      pathname = pathname.replace(/^[./]*/,\"/\");\n    }\n    urlStr += pathname;\n  }\n\n\n\n\n\n\n\n\n  //追加查询参数 addSearch 或 addSearchParams\n  var search = urlUtils.search;\n  var searchParams = urlUtils.searchParams;\n\n  if (!searchParams && search){\n    searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  if (searchParams){\n    var mergedSearchParams = Object.assign({},searchParams);\n  }\n\n  var params = urlUtils.params;\n  if(!searchParams && params){\n    var excludeParams = urlUtils.hashParams || {};\n    var excludeKeys = Object.keys(excludeParams)\n    searchParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (searchParams.noKeys){\n      searchParams = null;\n    }\n  }\n\n  var addSearchParams = urlUtils.addSearchParams;\n  var addSearch = urlUtils.addSearch;\n  if (!addSearchParams && addSearch){\n    addSearchParams = parseQueryString(addSearch,paramsPropParse);\n  }\n\n  if (searchParams && addSearchParams){\n    searchParams = Object.assign({},searchParams,addSearchParams);\n  }else if (addSearchParams){\n    searchParams = addSearchParams;\n  }\n\n\n\n\n  //拼接路径 search\n  if (searchParams && !searchParams.noKeys){\n    search = queryStringify(searchParams,true,paramsPropStringify);\n  }else {\n    search = null;\n  }\n\n  if (search){\n    urlStr += search;\n  }\n\n\n\n  //追加哈唏参数 addHashSearch 或 addHashParams\n  var hashSearch = urlUtils.hashSearch;\n  var hashParams = urlUtils.hashParams;\n\n  if (!hashParams && hashSearch){\n    hashParams = parseQueryString(hashSearch,paramsPropParse);\n  }\n\n  if(!hashParams && mergedSearchParams && params){\n    excludeKeys = Object.keys(mergedSearchParams)\n    hashParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (hashParams.noKeys){\n      hashParams = null;\n    }\n  }\n\n\n\n  var addHashParams = urlUtils.addHashParams;\n  var addHashSearch = urlUtils.addHashSearch;\n  if (!addHashParams && addHashSearch){\n    addHashParams = parseQueryString(addHashSearch,paramsPropParse);\n  }\n\n  if (hashParams && addHashParams){\n    hashParams = Object.assign({},hashParams,addHashParams);\n  }else if (addHashParams){\n    hashParams = addHashParams;\n  }\n\n\n\n\n  //拼接哈唏 hash\n  var hash = urlUtils.hash;\n  var hashUrlUtils = urlUtils.hashUrlUtils;\n\n\n  if (hashUrlUtils || hashParams) {\n\n    if (hashUrlUtils){\n      hashUrlUtils = Object.assign({},hashUrlUtils)\n    }else {\n      hashUrlUtils = {};\n    }\n\n    if (hash){\n      hash = hash.replace(/^#+/,\"\");\n      hashUrlUtils.href = hash;\n    }\n\n    if (hashParams) {\n      hashUrlUtils.searchParams = hashParams;\n    }\n\n    if (!hashUrlUtils.noKeys){\n      hash = stringifyUrl(hashUrlUtils,paramsPropStringify,paramsPropParse);\n    }\n\n  }\n\n\n  if (hash) {\n    hash = hash.replace(/^#*/,\"#\");\n    urlStr += hash;\n  }\n\n\n  return urlStr;\n}\n\n\n\n\n\n\n\n\n/**\n * 把url字符串分隔成 url、查询字符串search 和 哈唏hash 三段字符串；\n * @param urlStr\n * @returns {url: string, search: string, hash: string}   其中，url字符串不包括 search 和 hash ；并且 search 开头有 \"?\", hash 开头有 \"#\"\n *\n * 本方法法之所以没用正则 和 URL 等，目的是为了防止 urlStr 中 有 多个 ## 等不规范情况 和 让该方法具有通用性\n */\nexport function splitURLByQueryString(urlStr) {\n\n  var preIndex = urlStr.indexOf(\"?\");\n  var anrIndex = urlStr.indexOf(\"#\");\n\n  var urlQS = urlStr;\n  var hash = undefined;\n  if (anrIndex >= 0){\n    urlQS = urlStr.substring(0,anrIndex);\n    hash = urlStr.substring(anrIndex);\n  }\n\n  var search = undefined;\n  var url = urlQS;\n  if (preIndex >= 0) {\n    search = urlQS.substring(preIndex);\n    url = urlQS.substring(0,preIndex);\n  }\n\n  return {url,search,hash};\n}\n\n\n\n\n\n\n\n\n\n\n\n// JSON解析与字符串化：开始\n\n\n\n/**\n * 把对象 obj 用JSON的方式格式化成 URL 的参数格式；\n * @param obj : Object   必选；被格式化的对象\n * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n * @returns 格式化后的 URL 的参数格式\n *\n *\n * 说明\n * 当URL参数对象 obj 不只有一层属性（如果obj的属性也是对象）时，URL的查询字符串就很很表示了；本方法就是用来解决这个问题；\n * 被本方法格式化的URL查询字符串，需要用 JSON 的 parseQueryString 方法来解析成对象；\n *\n */\nexport function JSONQueryStringify(obj,queryPrefix) {\n  return queryStringify(obj,queryPrefix,_paramsPropJSONStringify);\n}\n\n\n\n/**\n * 把 通过 JSONQueryStringify 格式化后的查询字符串 queryString 解析成 对象；\n * @param queryString : string   必选；被格式化的对象\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryString(queryString) {\n  return parseQueryString(queryString,_paramsPropJSONParse);\n}\n\n\n\n\n\n\n/**\n * parseJSONQueryStrObjProperty(queryObj)\n * 把 通过 JSONQueryStringify 格式化后的查询字符串的对象的属性 解析成 真实的值；\n * @param queryObj : Object   必选；查询字符串对象; 一般是经过初次查询字符串的解析(比如：parseQueryString)成的对象；\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryStrObjProperty(queryObj) {\n  return Object.entries(queryObj).reduce(function (total, kvList) {\n    let key = kvList[0];\n    let jsonStr = decodeURIComponent(kvList[1]);\n    total[key] = JSON.correctParse(kvList[1]);\n\n    return total;\n  }, {});\n\n}\n\n\n\n// JSON解析与字符串化：结束\n\n\n\n\n//查询字符串：开始\n\n\n/**\n * 接口1\n * queryStringify(params,queryPrefix,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param queryPrefix ? : boolean   可选；默认值：false ; 是否带有 ？ 前缀\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n *\n *\n *\n *\n * 接口2:\n * queryStringify(params,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n */\nexport function queryStringify(params,queryPrefix,paramsPropStringify) {\n  if (arguments.length == 2 && typeof queryPrefix == \"function\"){\n    paramsPropStringify = queryPrefix;\n    queryPrefix = undefined;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n    var keyStr = encodeURIComponent(key);\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n    var valueStr = encodeURIComponent(value);\n\n    return keyStr + \"=\" + valueStr;\n  });\n\n  var queryString = paramList.join(\"&\");\n\n  if (queryPrefix){\n    queryString = \"?\" + queryString;\n  }\n\n  return queryString;\n\n}\n\n\n/**\n * parseQueryString(queryString,paramsPropParse)\n * @param queryString : string    被解析的查询字符串；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；对 value 进行转换\n * @returns Object   解析后的对象\n */\nexport  function parseQueryString(queryString,paramsPropParse) {\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var preIndex = queryString.indexOf(\"?\");\n  var anrIndex = queryString.indexOf(\"#\");\n\n  if (anrIndex == -1){\n    anrIndex = undefined;\n  }\n  queryString = queryString.substring(preIndex + 1,anrIndex);\n\n  queryString = queryString.replace(/^\\?/,\"\");\n  var kvStrList = queryString.split(\"&\");\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(\"=\");\n    var key = decodeURIComponent(kvList[0]);\n    var value = decodeURIComponent(kvList[1]);\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n\n//查询字符串：结束\n\n\n\n\n\n\n\n//类查询字符串：开始\n\n\n/**\n * similarQueryStringify(params,separOpts)\n * 将对类转化成 类似查询字符串格式的字符串\n *\n * @param params : Object    被序列化的参数对象\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n *\n * @returns string   序列化后的类查询字符串\n */\nexport function similarQueryStringify(params,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropStringify} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n\n    return key + kvSeparator + value;\n  });\n\n  var queryString = paramList.join(propSeparator);\n\n  return queryString;\n}\n\n\n\n/**\n * parseSimilarQueryString(queryString,separOpts)\n * 解析 类似查询字符串格式的字符串\n *\n * @param queryString : string    被解析的类似查询字符串格式的字符串；\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,queryString)=> value    可选；对 value 进行转换\n *\n * @returns Object   解析后的对象\n */\nexport function parseSimilarQueryString(queryString,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropParse} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var kvStrList = queryString.split(propSeparator);\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(kvSeparator);\n    var key = kvList[0];\n    var value = kvList[1];\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n//类查询字符串：结束\n\n\n\n\n\n\n//不依赖 URL 和 URLSearchParams 的解析：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：结束\n\n\n\n\n\n\n\n\n\n\n\n\n// Object扩展：开始\n\n\nlet objectPropertyDescriptors = {\n\n\n\n  //URL相关：开始\n\n\n  /**\n   * toJSONqueryStringify(queryPrefix)\n   * 把当前对象 用JSON的方式格式化成 URL 的参数格式\n   * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n   * @returns 格式化后的 URL 的参数格式\n   *\n   * 说明\n   * 本方法是通过 JSONQueryStringify 方法进行格式化的\n   */\n  toJSONqueryStringify: {\n    enumerable: false,\n    value: function (queryPrefix) {\n      return JSONQueryStringify(this,queryPrefix);\n    }\n  },\n\n\n  //URL相关：结束\n\n\n};\n\n\n\n\nObject.defineProperties(Object.prototype, objectPropertyDescriptors);\n\n\n// Object扩展：结束\n\n\n\n// String扩展：开始\n\nlet stringPropertyDescriptors = {\n\n  /**\n   * 获取当前字符串经过 parseJSONQueryString 解析成的 对象；\n   *\n   * 说明：\n   * 本方法是通过 parseJSONQueryString 方法进行解析的；\n   */\n  urlJSONQueryObj:{\n    get:function () {\n     return parseJSONQueryString(this);\n    }\n  },\n};\n\n\n\nObject.defineProperties(String.prototype,stringPropertyDescriptors);\n\n\n// String扩展：结束\n","import \"es-expand\"\n\nexport * from \"./ByURL\"\nexport * from \"./ByURLSearchParams\"\n\n\n/**\n * 通过把值转换成JSON字符来判断是否相等\n * @param value1 : any\n * @param value2 : any\n * @returns boolean\n *\n *\n * 注意：\n * - 方法能用于判断对象的内容是否相等，相等的条件是：这2个对象拥有相同的属性 和 属性值，且属性及属性的属性 的添加顺序是一致的；即：当两个对象的拥有相同的属性和属性值时，如果属性的定义的顺序不同，该方法会返回 false；\n * - 该方法依赖于 JSON.stringify() 的逻辑；\n */\nexport function isEqualOfJSON(value1, value2) {\n  return JSON.stringify(value1) == JSON.stringify(value2);\n}\n\n\n\n\n  //遍历优化：开始\n\n\n/**\n * multipleLoop(option)=> stopLoop()\n * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n * @param option : {loopCall,complete,stepComplete,thisValue,total,step,delay}   选项对象\n * @property option.loopCall : (index,stepCount,total)=>stopInfo : any  必选；每次循环的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.stepComplete ？ : (index,stepCount,total)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.complete ？: (stopInfo,index,stepCount,total)=>Void  可选；循环结束时的回调函数； 入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数；\n * @property option.thisValue ? : any   loopCall、complete、stepComplete 回调函数的this的值；\n * @property option.total ? : number   可选；默认值：无穷大 Number.POSITIVE_INFINITY ; 设置总数循环次数；\n * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n */\n\n\nexport function multipleLoop({loopCall,complete,stepComplete,thisValue,total=Number.POSITIVE_INFINITY,step = 50,delay = 0}) {\n\n\n  let index = 0;\n  let stepCount = 0;   //已经完成了多少批遍历\n\n\n  /**\n   * 设置是否要停止循环；\n   *\n   * 之所以通过函数来设置，而不是直接给stop变量赋值，是因为：\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  let stop = false;    //停止循环的开关；表示是否终止循环；\n  function setStop(newValue){\n    if (newValue){\n      stop = newValue;\n\n      if (complete) {\n        complete.call(thisValue,stop,index,stepCount,total);\n      }\n    }\n  }\n\n\n  /**\n   * 是否需要循环；\n   * @returns boolean\n   *\n   * 之所以定义成函数形式，而不定义成变量，是因为：\n   * - 减少代码冗余；\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  function loop(){\n    let needLoop = index < total;\n\n    if (!needLoop && complete) {\n      complete.call(thisValue,false,index-1,stepCount,total);\n    }\n    return needLoop\n  }\n\n\n  let timeoutId = null;\n\n\n\n\n\n\n  /**\n   * 自调用单次循环\n   */\n  function atuoSingleLoop() {\n    stepCount++;\n\n    let singleTotal = Math.min(index + step,total);\n\n    function singleLoop(){return index < singleTotal}\n\n    while (singleLoop() && !stop){\n      setStop(loopCall.call(thisValue,index,stepCount,total));\n      index++;\n    }\n\n    if (stepComplete){\n      setStop(stepComplete.call(thisValue,index-1,stepCount,total));\n    }\n\n\n    if (loop() && !stop){\n      timeoutId = setTimeout(atuoSingleLoop,delay);\n    }\n  }\n\n\n  /**\n   * 停止循环\n   */\n  function stopLoop(stopInfo) {\n    if (!stopInfo){\n      stopInfo = true;\n    }\n\n    clearTimeout(timeoutId);\n    setStop(stopInfo);\n  }\n\n\n\n  if (loop()){ //开始循环\n    atuoSingleLoop();\n  }\n\n\n  return stopLoop;\n}\n\n\nlet arrayPropertyDescriptors = {\n\n\n  /**\n   * multipleLoop(option)=> stopLoop()\n   * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n   * @param option : {loopCall,complete,stepComplete,thisValue,step,delay}   选项对象\n   * @property option.loopCall : (currentValue,index,stepCount,arr)=>stopInfo : any  必选；每次循环的回调函数；入参 currentValue : Item  当前index对应数组元素； 入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr:Array 当前被循环的数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.stepComplete ？ : (index,stepCount,arr)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.complete ？: (stopInfo,index,stepCount,arr)=>Void  可选；循环结束时的回调函数；入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组；\n   * @property option.thisValue ? : any   可选；默认值：当前数组； loopCall、complete、stepComplete  回调函数的this的值；\n   * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n   * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n   * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n   */\n  multipleLoop: {\n    enumerable: false,\n    value: function ({loopCall,complete,stepComplete,thisValue,step,delay}) {\n\n      if (thisValue){\n        thisValue = this;\n      }\n\n      let loopOpt = {\n        loopCall:(index,stepCount,total)=> {\n          return loopCall.call(thisValue,this[index],index,stepCount,this);\n        },\n        total:this.length,\n        step:step,\n        delay:delay\n      };\n\n      if (complete){\n        loopOpt.complete = (stopInfo,index,stepCount,total)=>{\n          return complete.call(thisValue,stopInfo,index,stepCount,this);\n        };\n      }\n\n      if (stepComplete){\n        loopOpt.stepComplete = (index,stepCount,total)=>{\n          return stepComplete.call(thisValue,index,stepCount,this);\n        };\n      }\n\n\n      return multipleLoop(loopOpt);\n    }\n  }\n\n};\n\n  Object.defineProperties(Array.prototype, arrayPropertyDescriptors);\n\n\n\n  //遍历优化：结束\n\n\n\n\n\n\n/**\n * safelyIterate(iterable,operation, thisValue)\n * 对 iterable  进行安全的迭代；与 for...of 的区别是：safelyIterate 能保证会迭代过程不会受 operation 中的行为的影响从而迭代每一个元素；\n * @param iterable : Iterable   必选； 可迭代的对象；\n * @param operation : (currentValue,currentIndex,iterable)=>boolean | undefined     执行的操作， 该函数的返回值表示是否要过滤出该元素\n * @param thisValue ? : any   可选，默认值是 iterable ；操作 operation 的 this 值\n * @returns [Item]  返回被 operation 过滤出的元素\n *\n *\n * operation(currentValue,currentIndex,iterable)=>boolean | undefined\n * @param currentValue : any   调用 operation 时的元素的值；\n * @param currentIndex : number     currentValue 在原始 iterable 中 对应的迭代索引值；\n * @param iterable : Iterable   被迭代的 iterable ；\n * @returns boolean | undefined  表示是否要过滤出 currentValue ；\n *\n */\nexport function safelyIterate(iterable,operation, thisValue) {\n\n  if (thisValue == undefined) {\n    thisValue = iterable;\n  }\n\n  let arrayCopy = [];\n\n  for (let value of iterable){\n    arrayCopy.push(value);\n  }\n\n  let filterItem = arrayCopy.filter(function (currentValue) {\n    let currentIndex = this.indexOf(currentValue);\n    operation.call(thisValue, currentValue, currentIndex, iterable);\n  },arrayCopy);\n\n\n  return filterItem;\n\n}\n\n\n\n\n\n\n//类型：开始\n\n\n/**\n * 获取 inst 的类型\n * @param inst : any\n * @returns Type    inst 的类型\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：undefined\n * null ： null\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数\n *\n */\nexport function getTypeOf(inst) {\n  var typeInfo = inst;\n  if (inst != null){\n    typeInfo = inst.constructor;\n  }\n\n  return typeInfo;\n\n}\n\n\n\n\n\n/**\n * 获取 inst 的类型字符串\n * @param inst : any\n * @returns string    inst 的类型字符串\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：\"undefined\"\n * null ： \"null\"\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数 的函数名字\n *\n */\nexport function getTypeStringOf(inst) {\n\n  switch (inst){\n    case undefined:{\n      var typeStr = \"undefined\";\n      break;\n    }\n\n    case null:{\n      typeStr = \"null\";\n      break;\n    }\n\n    default:{\n      typeStr = inst.constructor.name;\n    }\n  }\n\n  return typeStr;\n\n}\n\n\n\n//类型：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 定义可监听的属性\n *\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n * @property  ready ?:string    可选；默认值：prop + \"Ready\" ；ready属性的属性名字；\n * @property  noEvent ?:boolean    可选；默认值：false ；是否要给 prop 属性增加值变更事件；\n * @property  event ?:string    可选；默认值：prop +  \"Change\" ；prop变更事件的名字；\n * @property  newValueKey ?:string    可选；默认值：\"value\" ；prop变更事件的事件对象中保存新值的属性名字；\n * @property  oldValueKey ?:string    可选；默认值：\"oldValue\" ；prop变更事件的事件对象中保存旧值的属性名字；\n * @property  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n *\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperty(obj,prop,options){\n  let {ready:readyName = prop + \"Ready\",noEvent,event:eventName = prop +  \"Change\",newValueKey = \"value\",oldValueKey = \"oldValue\",getDefault} = options || {};\n  let priReadyName = \"_\" + readyName;\n  let priProp = \"_\" + prop;\n\n\n\n  /**\n   * 给 obj 定义 ready 计算属性 ，用于获取客户端的准备状态的promise ，当访问 ready 时，如果 ready 不存在，则会自动创建\n   */\n  Object.defineProperty(obj, readyName, {\n    configurable:true,\n    enumerable:true,\n    get: function () {\n      let _this = this || window;\n      if (!_this[priReadyName]) {\n        let propValue = _this[priProp];\n        if (propValue){\n          _this[priReadyName] = Promise.resolve(propValue);\n        }else {\n          _this[priReadyName] = createControllablePromise();\n        }\n\n      }\n      return _this[priReadyName];\n    },\n    set:function (newValue) {\n      let _this = this || window;\n      _this[priReadyName] = newValue;\n    }\n  });\n\n\n\n  //创建 prop 的 get 方法\n  if (getDefault){\n\n    var propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this,_this);\n      }\n      return _this[priProp];\n    }\n\n  }else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  //创建 prop 的 set 方法\n\n  if (noEvent){\n\n\n    var propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n      }\n    }\n\n  }else {\n\n\n    propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n        //派发 change 事件\n        let change = new Event(eventName, {\"bubbles\": true});\n        change[newValueKey] = newValue;\n        change[oldValueKey] = oldValue;\n        window.dispatchEvent(change);\n\n\n      }\n    }\n\n  }\n\n\n\n\n\n  /**\n   * 给 obj 对象 添加计算属性 prop ，用以获取 prop\n   *\n   * 注意：\n   * 当 prop 的值变更时，会在 window 上触发该属性的 change 事件\n   * 通过事件的 event[newValueKey] 可能获取改变后的新值\n   * 通过事件的 event[oldValueKey] 可能获取改变前的旧值\n   */\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter,\n    set: propSetter\n  });\n\n\n  return obj;\n}\n\n\n\n\n\n/**\n * 批量定义可监听的属性\n *\n * 接口1：defineListenableProperties(obj,propOptions)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propOptions : {propName:options}   必选；要定义的属性的配置对象；以该配置对象的属性属性为 要配置的属性的名字，以其值为 本配置的属性的 配置选项\n * @returns obj : Object  被传递给函数的对象。\n *\n *\n * 接口2：defineListenableProperties(obj,propArray,options)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propArray : [string]   必选；要在其上定义的属性的名字列表。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperties(obj,props,options){\n\n  var propsObj = props;\n  if (Array.isArray(props)) {\n    propsObj = props.reduce(function (total,propName) {\n      total[propName] = options;\n      return total;\n    },{});\n  }\n\n\n  Object.keys(propsObj).forEach(function (propName) {\n    let propOpts = propsObj[propName];\n    defineListenableProperty(obj,propName,propOpts);\n  });\n\n  return obj;\n}\n\n\n/**\n * defineListenablePropertyGetter(obj, prop, getDefault, asGetter)\n * 定义可监听属性的 getter ； 该方法一般经常用于：一些可监听属性在被定义时，还不能定义 getDefault 选项，只能在稍后某个时刻定义 getDefault 选项，此时便可用此函数来简化重新定义 getter 的操作；\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n * @param asGetter ?: boolean    可选；是否将 getDefault 作为 getter\n */\nexport function defineListenablePropertyGetter(obj, prop, getDefault, asGetter) {\n\n  let priProp = \"_\" + prop;\n\n  if (asGetter) {\n    var propGetter = getDefault;\n  } else if (getDefault) {\n\n    propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this, _this);\n      }\n      return _this[priProp];\n    }\n\n  } else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter\n  });\n}\n\n\n/**\n * 生成唯一的标识符\n * @returns {string}\n */\nexport function createUniqueIdentifier() {\n  var currentDate = new Date();\n  return currentDate.getTime().toString() + Math.random();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * createControllablePromise(executor ?:(resolve, reject)=>Void)\n * 创建外部可控制的改变 Promise 状态 Status 的 Promise 对象；该 Promise 对象在 状态 未完成之前，会有 resolve、reject、clearAdditions 三个方法，当 Promise 的状态完成时，resolve、reject、clearAdditions 这三个方法会自动被删除；其中 clearAdditions 方法是用来 清除 该实例的 resolve、reject、clearAdditions 这三个方法的；\n *\n * @param executor ?: (resolve, reject)=>Void    可选；executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数，\n * @param statusCompletesImmediately ?: boolean   可选；默认值：true； 该参数表示在 executor 函数中是否会立即（同步）调用 resolve 或 reject ；如果是，则会把 executor 函数变成异步执行，以来避免在执行 clearAdditions 时引用 还未创建的 真实的 promise 实例；\n * @returns Promise   返回一个带有 resolve、reject 和 clearAdditions  三个方法的 Promise 实例，在该实例的 状态没有改变之前 ，通过 resolve 和 reject 这两个方法，可以改变 Promise 的状态，并且会自动调用 clearAdditions 方法来清除  resolve、reject、clearAdditions 这三个方法； clearAdditions 方法用来清除 resolve、reject 和 clearAdditions  这三个方法的\n */\nexport function createControllablePromise(executor,statusCompletesImmediately) {\n  let executorIsvalid = typeof executor == \"function\";\n  if (executorIsvalid && statusCompletesImmediately == undefined){\n    statusCompletesImmediately = true\n  }\n\n\n  var oriFuns = {};\n\n  function clearAdditions() {\n    caPromise.resolve = undefined;\n    caPromise.reject = undefined;\n    caPromise.clearAdditions = undefined;\n  }\n\n  function resolveFun(value) {\n    clearAdditions();\n    oriFuns.resolve(value);\n  }\n\n  function rejectFun(reason) {\n    clearAdditions();\n    oriFuns.reject(reason);\n  }\n\n\n  var caPromise = new Promise(function (resolve, reject) {\n    oriFuns.resolve = resolve;\n    oriFuns.reject = reject;\n    if (executorIsvalid) {\n      if (statusCompletesImmediately) {\n        setTimeout(executor,0,resolveFun, rejectFun);\n      }else {\n        return executor(resolveFun, rejectFun);\n      }\n    }\n  });\n\n  caPromise.clearAdditions = clearAdditions;\n  caPromise.resolve = resolveFun;\n  caPromise.reject = rejectFun;\n\n\n  return caPromise;\n}\n","import {createUniqueIdentifier} from 'com-tools'\n\n/**\n * DoneCount\n * 完成计数\n * 用于统计一组操作的完成情况\n */\nexport class DoneCount{\n\n  /**\n   * forcedDone : boolean     强制完成标识\n   */\n  forcedDone = false;\n\n\n\n  //总数量\n  get total(){\n    if (this.oriTotal == undefined){\n      this.oriTotal = 1;\n    }\n    return this.oriTotal;\n  }\n  set total(newValue){\n    this.oriTotal = newValue;\n  }\n\n\n  //已完成数量\n  get doneNum(){\n    if (!this._doneNum){\n      this._doneNum = 0;\n    }\n\n    return this._doneNum;\n  }\n\n  set doneNum(newValue){\n    this._doneNum = newValue || 0;\n  }\n\n\n  /**\n   *\n   * @param totalOrOptions : DoneCountOptions\n   * DoneCountOptions = total:number | DoneCountProps\n   * DoneCountProps = {total:number,doneNum:number}\n   */\n  constructor(totalOrOptions){\n    if (typeof totalOrOptions == \"object\"){\n      var {total,...otherProps} = totalOrOptions;\n    }else {\n      total = totalOrOptions;\n    }\n\n\n    this.total = total;\n\n    if (otherProps){\n      Object.assign(this,otherProps);\n    }\n  }\n\n  get undoneNum(){\n    let total = this.total;\n    let doneNum = this.doneNum;\n    return total < doneNum ? 0 : total - doneNum;\n  }\n\n\n  /**\n   * done : boolean   只读；表示是否完成\n   */\n  get done(){\n    return this.forcedDone || this.realDone\n  }\n\n  /**\n   * realDone : boolean   只读；表示实际上是否真正的完成\n   */\n  get realDone(){\n    return this.total <= this.doneNum\n  }\n\n\n\n  /**\n   * 重置\n   */\n  reset(){\n    this.total = 1;\n    this.resetDoneNum();\n  }\n\n  /**\n   * 重置\n   */\n  resetDoneNum(){\n    this.doneNum = 0;\n  }\n\n\n\n  /**\n   * 登录新的完成次数\n   * @param num : number\n   * @returns boolean 是否完成\n   */\n  doneAgain(num = 1){\n    this.doneNum += num;\n    return this.done\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\nexport class NamedDoneCount extends DoneCount{\n\n  /**\n   *\n   * @param totalOrOptions : NamedDoneCountOptions\n   * NamedDoneCountOptions = total:number | NamedDoneCountProps\n   * NamedDoneCountProps = {...DoneCountProps,namesOrNum : Names | DoneNum,names: Names,autoIncrTotalIfRepeat:boolean,maxRepetNum:number}\n   *\n   * Names : string | [string]\n   * DoneNum : number\n   */\n  constructor(totalOrOptions){\n\n    if (typeof totalOrOptions == \"object\"){\n      var {total,namesOrNum,names,doneNum,...otherProps} = totalOrOptions;\n    }else {\n      total = totalOrOptions;\n    }\n\n    super(total);\n    this.total = total;\n\n    if (names) {\n      this.doneAgainNames(names);\n    }else if (doneNum != undefined){\n      this._doneNum = doneNum;\n    } else {\n      this.doneNum = namesOrNum\n    }\n\n    if (otherProps){\n      Object.assign(this,otherProps);\n    }\n\n  }\n\n\n  /**\n   * 当 name 重复时，是否自动增长 total\n   * @type {boolean}\n   */\n  autoIncrTotalIfRepeat;\n\n\n  get total(){\n    return this.autoIncrTotalIfRepeat ? this.oriTotal * (this.maxNameNum || 1) : this.oriTotal;\n  }\n\n  set total(newValue){\n    this.oriTotal = newValue;\n  }\n\n  get oriTotal(){\n    if (this._oriTotal == undefined){\n      this._oriTotal = 1;\n    }\n    return this._oriTotal;\n  }\n  set oriTotal(newValue){\n    this._oriTotal = newValue;\n  }\n\n\n\n\n  get nameRecord(){\n    if (!this._nameRecord) {\n      this._nameRecord = new Map();\n    }\n\n    return this._nameRecord;\n  }\n\n  /**\n   * 最大重复数目\n   * @type {number}\n   */\n  get maxRepetNum(){\n    let _maxRepetNum = this._maxRepetNum;\n    return (_maxRepetNum && _maxRepetNum > 0) ? _maxRepetNum : Infinity ;\n  }\n\n  set maxRepetNum(newValue){\n    this._maxRepetNum = newValue;\n  }\n\n\n  /**\n   * 获取所有 name 的总计数\n   * @returns {number}\n   */\n  get nameNum(){\n    let _nameNum = 0;\n    let maxRepetNum = this.maxRepetNum;\n    this.nameRecord.forEach((count,key)=>{\n      _nameNum += Math.min(count,maxRepetNum);\n    });\n\n    return _nameNum;\n  }\n\n\n  get _doneNum(){\n    if (this._doneNum_ == undefined){\n      this._doneNum_ = 0;\n    }\n\n    return this._doneNum_;\n  }\n\n  set _doneNum(newValue){\n    this._doneNum_ = newValue;\n  }\n\n\n  get doneNum(){\n    return this.nameNum + this._doneNum;\n  }\n\n  set doneNum(newValue){\n\n    if (typeof newValue == \"number\"){\n      var oldNum = this.doneNum;\n\n      if (oldNum < newValue) {\n        this._doneNum = newValue - this.nameNum;\n      }else {\n        this.resetDoneNum();\n        this._doneNum = newValue;\n      }\n\n    }else if (newValue == undefined) {\n      this.resetDoneNum();\n    } else {\n      this.doneAgainNames(newValue);\n    }\n\n  }\n\n\n\n\n\n  /**\n   * 重置\n   */\n  resetDoneNum(){\n    this.nameRecord.clear();\n    this._doneNum = 0;\n  }\n\n\n\n  /**\n   *\n   * @param namesOrNum : DoneNamesOrNum\n   * DoneNamesOrNum = number | DoneNames\n   * DoneNames = string | [string]\n   * @returns {*}\n   */\n  doneAgain(namesOrNum = 1){\n\n    if (typeof namesOrNum == \"number\") {\n      this._doneNum += namesOrNum;\n    }else {\n      this.doneAgainNames(namesOrNum)\n    }\n    return this.done\n  }\n\n\n  /**\n   * @param names : DoneNames\n   * @returns {*}\n   */\n  doneAgainNames(names){\n\n    if(!Array.isArray(names)){\n      names = [names];\n    }\n    let nameRecord = this.nameRecord;\n    names.forEach((nm)=>{\n      let nameCount = nameRecord.get(nm) || 0;\n      nameRecord.set(nm, ++nameCount);\n    });\n\n    return this.done;\n  }\n\n\n  has(name){\n    return this.nameRecord.has(name);\n  }\n\n\n  /**\n   * 获取指定 name 的计数\n   * @param name\n   * @returns {*|number}\n   */\n  getNameNum(name){\n    let nameNum = this.nameRecord.get(name) || 0;\n    return Math.min(nameNum,this.maxRepetNum);\n  }\n\n\n  /**\n   * 获取最大的 name 计数\n   * @returns {number}\n   */\n  get maxNameNum(){\n    let countArr = Array.from(this.nameRecord.values());\n    let maxCount = countArr.length > 0 ? Math.max.apply(Math,countArr) : 0;\n\n    return Math.min(maxCount,this.maxRepetNum);\n  }\n\n\n\n}\n\n\n\n\n\n/**\n * 冲突策略 ConflictPolicy 类型常量\n * ConflictPolicy = \"Add\" | \"Reset\" | \"Recreate\" | \"Update\"\n */\nexport const conflictPolicy_Add = \"Add\";\nexport const conflictPolicy_Reset = \"Reset\";\nexport const conflictPolicy_Recreate = \"Recreate\";\nexport const conflictPolicy_Update = \"Update\"\n\n\n\n\n\n/**\n * 自动删除目标 AutoDeleteTarget 类型常量\n * AutoDeleteTarget = \"ForcedDone\" | \"RealDone\" | \"Done\"\n */\nexport const autoDeleteTarget_ForcedDone = \"ForcedDone\";\nexport const autoDeleteTarget_RealDone = \"RealDone\";\nexport const autoDeleteTarget_Done = \"Done\";\n\n\n\n/**\n * 自动删除目标 AutoDeleteMode 类型常量\n * AutoDeleteMode = \"Delay\" | \"Immediately\" | \"No\"\n */\nexport const autoDeleteMode_Delay = \"Delay\";\nexport const autoDeleteMode_Immediately = \"Immediately\";\nexport const autoDeleteMode_No = \"No\";\n\n\n\n\n\n\nexport class DoneCountManager {\n\n  /**\n   * props : DCManagerProps\n   * DCManagerProps = {clearDelay:number,conflictPolicy : ConflictPolicy ,autoDeleteTarget:AutoDeleteTarget ,autoDeleteMode:AutoDeleteMode}\n   * @param props\n   */\n  constructor(props={}) {\n    Object.assign(this,props)\n  }\n\n\n\n\n  get doneMap(){\n    if (!this._doneMap){\n      this._doneMap = new Map();\n    }\n\n    return this._doneMap;\n  }\n\n\n  set doneMap(newValue){\n    this._doneMap = newValue;\n  }\n\n\n  /**\n   * 创建 DoneCount 实例\n   * @param totalOrOptions : DoneCountOptions\n   * @returns {DoneCount}\n   */\n  _createDoneCount(totalOrOptions){\n    return new DoneCount(totalOrOptions);\n  }\n\n  /**\n   * 在不改变完成数的情况下，根据 confOpts 配置 doneCount\n   * @param doneCount : DoneCount\n   * @param dcProps : DoneCountProps\n   * @returns {*}\n   * @private\n   */\n  _confDoneCount(doneCount,dcProps){\n    let {doneNum,...otherProps} = dcProps;\n    Object.assign(doneCount,otherProps);\n    return doneCount;\n  }\n\n\n  /**\n   * 设置 延迟清除已完成的 DoneCount 的延时时间\n   * @returns {number|*}\n   */\n  get clearDelay(){\n    if (this._clearDelay == undefined){\n      this._clearDelay = 100;\n    }\n\n    return this._clearDelay;\n  }\n\n  set clearDelay(newValue){\n    this._clearDelay = newValue;\n  }\n\n\n  /**\n   * 延迟删除指定 key 的 DoneCount\n   * @param key : DoneCountKey  需要被延迟删除的 DoneCount 的 key\n   * @param delay ?: number   可选；默认值：this.clearDelay； 延时时间；\n   *\n   * 注意：\n   * - 只有 当 doneCount 已经完成时 才会被删除，否则，不会被删除；\n   */\n  delayClearKey(key,delay = this.clearDelay) {\n    let doneCount = this.doneMap.get(key);\n    if (doneCount.done) {\n      setTimeout(() => {\n        this.clearKey(key);\n      }, delay);\n    }\n  }\n\n\n  /**\n   * 删除指定 key 的 DoneCount\n   * @param key : DoneCountKey  需要被删除的 DoneCount 的 key\n   * @return boolean  表示是否完成删除；\n   *\n   * 注意：\n   * - 只有 当 doneCount 已经完成时 才会被删除，否则，不会被删除；\n   * - 当指定 key 的 doneCount 不存时，也会 返回 true ；\n   */\n  clearKey(key) {\n\n    let doneMap = this.doneMap;\n\n    let doneCount = doneMap.get(key);\n    let done = doneCount ? doneCount.done : true;\n    if (doneCount && done) {\n      doneMap.delete(key);\n    }\n    return done;\n\n  }\n\n  clear(){\n    let keyArr = Array.from(this.doneMap.keys());\n    return keyArr.every( (key)=> {\n      return this.clearKey(key)\n    });\n  }\n\n\n  forcedDoneKey(key){\n    let doneCount = this.doneMap.get(key);\n    if (doneCount){\n      doneCount.forcedDone = true;\n    }\n  }\n\n  forcedDone(){\n    this.doneMap.forEach((dc)=>{\n      dc.forcedDone = true;\n    });\n  }\n\n\n  /**\n   * 注册 DoneCount 时，当 注册的 DoneCount 的 total 和 已存在的 DoneCount 的 total 不一致时 的处理方式\n   * @returns {string|*}\n   */\n  get conflictPolicy(){\n    if (!this._conflictPolicy){\n      this._conflictPolicy = conflictPolicy_Recreate;\n    }\n\n    return this._conflictPolicy;\n  }\n\n\n  set conflictPolicy(newValue){\n    this._conflictPolicy = newValue;\n  }\n\n\n\n  /**\n   * 注册DoneCount\n   * @param keyOrOpts : DoneAgainOptions\n   *\n   * DoneAgainOptions = key | {key,conflictPolicy,...DoneCountProps}\n   * @returns {DoneCount}\n   */\n  register(keyOrOpts){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,total = 1,conflictPolicy,...otherOpts} = keyOrOpts;\n    }else {\n      key = keyOrOpts;\n      total = 1;\n    }\n\n    conflictPolicy = conflictPolicy || this.conflictPolicy;\n\n    let doneMap = this.doneMap;\n    let doneCount = doneMap.get(key);\n    if  (!doneCount || doneCount.realDone ){\n      doneCount =  this._createDoneCount(total);\n    }else if (doneCount.oriTotal != total){\n\n      switch (conflictPolicy) {\n        case conflictPolicy_Recreate:{\n          doneCount  = this._createDoneCount(total);\n          break;\n        }\n        case conflictPolicy_Add:{\n          doneCount.total += total;\n          break;\n        }\n        case conflictPolicy_Reset:{\n          doneCount.reset();\n          doneCount.total = total;\n          break;\n        }\n        case conflictPolicy_Update:{\n          doneCount.total = total;\n          break;\n        }\n\n      }\n\n    }\n\n    if (otherOpts){\n      doneCount = this._confDoneCount(doneCount,otherOpts);\n    }\n\n    doneMap.set(key,doneCount);\n\n    return doneCount;\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param doneNum\n   * @returns DoneCount | Error\n   */\n  unsafeDoneAgain(keyOrOpts,doneNum = 1){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,doneNum = 1,...otherProps} = keyOrOpts;\n    }else {\n      key = keyOrOpts;\n    }\n\n    let doneCount = this.doneMap.get(key);\n\n    if (!doneCount){\n      // console.error(\"不存在 key 为 %s 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: %o\",key,arguments);\n      let message = `不存在 key 为 ${key} 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: ${JSON.stringify(arguments)}`;\n      let err = new Error(message);\n      err.name = \"DoneCountManager\"\n      return err;\n    }\n\n    doneCount.doneAgain(doneNum);\n\n    this.autoDelete(key,otherProps);\n    return doneCount;\n  }\n\n\n\n\n  /**\n   * autoDeleteTarget : AutoDeleteTarget    自动删除目标\n   */\n  get autoDeleteTarget(){\n    if (!this._autoDeleteTarget) {\n      this._autoDeleteTarget = autoDeleteTarget_RealDone;\n    }\n\n    return this._autoDeleteTarget;\n  }\n\n  set autoDeleteTarget(newValue){\n    this._autoDeleteTarget = newValue;\n  }\n\n\n\n\n\n  /**\n   * autoDeleteMode : AutoDeleteMode   自动删除模式\n   */\n  get autoDeleteMode(){\n    if (!this._autoDeleteMode) {\n      this._autoDeleteMode = autoDeleteMode_Delay;\n    }\n\n    return this._autoDeleteMode;\n  }\n\n  set autoDeleteMode(newValue){\n    this._autoDeleteMode = newValue;\n  }\n\n\n  /**\n   * 根据配置 options ，自动删除指定 key 的 DoneCount\n   * @param key : DoneCountKey    被自动删除的 DoneCount 的 key\n   * @param options ?: AutoDeleteOptions   可选；配置选项\n   *\n   * AutoDeleteOptions = {autoDeleteMode : AutoDeleteMode,autoDeleteTarget : AutoDeleteTarget,clearDelay : number}\n   */\n  autoDelete(key,options = {}){\n    let {autoDeleteMode = this.autoDeleteMode,autoDeleteTarget = this.autoDeleteTarget,clearDelay} = options;\n\n    let doneCount = this.doneMap.get(key);\n    switch (autoDeleteTarget) {\n      case autoDeleteTarget_RealDone:{\n        if (!doneCount.realDone){\n          return;\n        }\n        break;\n      }\n\n      case autoDeleteTarget_ForcedDone:{\n        if (!doneCount.forcedDone){\n          return;\n        }\n        break;\n      }\n\n    }\n\n    switch (autoDeleteMode) {\n      case autoDeleteMode_Delay:{\n        this.delayClearKey(key,clearDelay);\n        break;\n      }\n\n      case autoDeleteMode_Immediately:{\n        this.clearKey(key);\n        break;\n      }\n\n    }\n\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param doneNum : DoneNamesOrNum\n   * @returns {*}\n   */\n  doneAgain(keyOrOpts,doneNum = 1){\n    this.register(keyOrOpts);\n    return this.unsafeDoneAgain(keyOrOpts,doneNum);\n  }\n\n\n  getDoneCount(key){\n    return this.doneMap.get(key);\n  }\n\n\n\n  getUndoneNum(key){\n    var dc = this.getDoneCount(key);\n    return dc?dc.undoneNum : 0;\n  }\n\n  getDone(key){\n    return this.getUndoneNum(key) == 0 ;\n  }\n\n\n\n\n  get info(){\n    let info = {total:0,doneNum:0,undoneNum:0};\n    let keys = [];\n    let allDone = true;\n    this.doneMap.forEach((dc,key)=>{\n      info.total += dc.total;\n      info.doneNum += dc.doneNum;\n      info.undoneNum += dc.undoneNum;\n      keys.push(key);\n\n      if (!dc.done) {\n        allDone = false;\n      }\n    });\n\n    info.keys = keys;\n    info.allDone = allDone;\n\n    return info;\n  }\n\n\n  get total(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.total;\n    });\n    return total;\n  }\n\n\n\n  get doneNum(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.doneNum;\n    });\n    return total;\n  }\n\n\n\n  get undoneNum(){\n    let total = 0;\n    this.doneMap.forEach((dc)=>{\n      total += dc.undoneNum;\n    });\n    return total;\n  }\n\n  get done(){\n    let allDone = true;\n    this.doneMap.forEach((dc,key)=>{\n      if (!dc.done) {\n        allDone = false;\n      }\n    });\n\n    return allDone;\n  }\n\n\n}\n\n\n\n\n\n\n\n\nexport class NamedDoneCountManager extends DoneCountManager{\n\n\n  /**\n   * 创建 DoneCount 实例\n   * @param totalOrOptions\n   * @returns {DoneCount}\n   */\n  _createDoneCount(totalOrOptions){\n    return new NamedDoneCount(totalOrOptions);\n  }\n\n\n\n  /**\n   * DoneCount 的 autoIncrTotalIfRepeat 的默认值\n   * @type {boolean}\n   */\n  autoIncrTotalIfRepeat;\n\n\n  /**\n   * 在不改变完成数的情况下，根据 confOpts 配置 doneCount\n   * @param doneCount\n   * @param confOpts\n   * @returns {*}\n   * @private\n   */\n  _confDoneCount(doneCount,confOpts){\n    let {namesOrNum,names,doneNum,autoIncrTotalIfRepeat = this.autoIncrTotalIfRepeat,...otherOpts} = confOpts;\n    otherOpts.autoIncrTotalIfRepeat = autoIncrTotalIfRepeat;\n\n    Object.assign(doneCount,otherOpts);\n    return doneCount;\n  }\n\n\n  /**\n   *\n   * @param keyOrOpts : DoneAgainOptions\n   * @param namesOrNum : DoneNamesOrNum\n   * @returns DoneCount | Error\n   *\n   * DoneAgainOptions = {key,namesOrNum,names,doneNum,...}\n   */\n  unsafeDoneAgain(keyOrOpts,namesOrNum = 1){\n    if (typeof keyOrOpts == \"object\") {\n      var {key,namesOrNum,names,doneNum,...otherProps} = keyOrOpts;\n      namesOrNum = doneNum || namesOrNum || 1;\n    }else {\n      key = keyOrOpts;\n    }\n\n    let doneCount = this.doneMap.get(key);\n\n    if (!doneCount){\n      // console.error(\"不存在 key 为 %s 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: %o\",key,arguments);\n      let message = `不存在 key 为 ${key} 的 DoneCount 实例；该 key 对应的 DoneCount 可能已经完成，请检查 相关配置选项是否正确； 传入的参数为: ${JSON.stringify(arguments)}`;\n      let err = new Error(message);\n      err.name = \"DoneCountManager\"\n      return err;\n    }\n\n    if (names) {\n      doneCount.doneAgainNames(names);\n    } else {\n      doneCount.doneAgain(namesOrNum)\n    }\n\n    this.autoDelete(key,otherProps);\n    return doneCount;\n  }\n\n\n}\n"],"sourceRoot":""}